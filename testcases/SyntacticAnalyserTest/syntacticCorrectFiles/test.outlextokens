[inlinecmt, // ====== Class declarations ====== //, 1] 
[struct, struct, 2][id, POLYNOMIAL0, 2] [opencubr, {, 2] 
[inlinecmt, //no member, 3]
[closecubr, }, 4][semi, ;, 4] 
[struct, struct, 5][id, POLYNOMIAL1, 5] [opencubr, {, 5] 
[private, private, 6][let, let, 6] [id, a, 6] [colon, :, 6] [float, float, 6] [semi, ;, 6] 
[private, private, 7][let, let, 7] [id, b, 7] [colon, :, 7] [float, float, 7] [semi, ;, 7] [inlinecmt, //no member function declaration, 7] 
[closecubr, }, 8][semi, ;, 8] 
[struct, struct, 10][id, LINEAR, 10] [inherits, inherits, 10] [id, POLYNOMIAL, 10] [opencubr, {, 10] [inlinecmt, //inherits one class, 10] 
[private, private, 11][let, let, 11] [id, a, 11] [colon, :, 11] [float, float, 11] [semi, ;, 11] 
[private, private, 12][let, let, 12] [id, b, 12] [colon, :, 12] [float, float, 12] [semi, ;, 12] 
[public, public, 13][func, func, 13] [id, build, 13] [openpar, (, 13] [id, A, 13] [colon, :, 13] [float, float, 13] [comma, ,, 13] [id, B, 13] [colon, :, 13] [float, float, 13] [closepar, ), 13] [arrow, ->, 13] [id, LINEAR, 13] [semi, ;, 13] 
[public, public, 14][func, func, 14] [id, evaluate, 14] [openpar, (, 14] [id, x, 14] [colon, :, 14] [float, float, 14] [closepar, ), 14] [arrow, ->, 14] [float, float, 14] [semi, ;, 14] 
[closecubr, }, 15][semi, ;, 15] 
[struct, struct, 17][id, QUADRATIC, 17] [inherits, inherits, 17] [id, POLYNOMIAL0, 17] [comma, ,, 17] [id, POLYNOMIAL1, 17] [opencubr, {, 17] [inlinecmt, // multiple inherited class, 17] 
[private, private, 18][let, let, 18] [id, a, 18] [colon, :, 18] [float, float, 18] [semi, ;, 18] 
[public, public, 19][let, let, 19] [id, b, 19] [colon, :, 19] [float, float, 19] [semi, ;, 19] 
[public, public, 20][let, let, 20] [id, c, 20] [colon, :, 20] [float, float, 20] [semi, ;, 20] 
[public, public, 21][func, func, 21] [id, build, 21] [openpar, (, 21] [id, A, 21] [colon, :, 21] [float, float, 21] [comma, ,, 21] [id, B, 21] [colon, :, 21] [float, float, 21] [comma, ,, 21] [id, C, 21] [colon, :, 21] [float, float, 21] [closepar, ), 21] [arrow, ->, 21] [id, QUADRATIC, 21] [semi, ;, 21] 
[public, public, 22][func, func, 22] [id, evaluate, 22] [openpar, (, 22] [id, x, 22] [colon, :, 22] [float, float, 22] [closepar, ), 22] [arrow, ->, 22] [float, float, 22] [semi, ;, 22] 
[public, public, 23][func, func, 23] [id, evaluate1, 23] [openpar, (, 23] [id, x, 23] [colon, :, 23] [integer, integer, 23] [closepar, ), 23] [arrow, ->, 23] [integer, integer, 23] [semi, ;, 23] 
[closecubr, }, 24][semi, ;, 24] 
[inlinecmt, // ====== struct implementations ====== //, 26]
[impl, impl, 27][id, POLYNOMIAL1, 27] [opencubr, {, 27] 
[func, func, 28][id, evaluate, 28] [openpar, (, 28] [id, x, 28] [colon, :, 28] [float, float, 28] [closepar, ), 28] [arrow, ->, 28] [float, float, 28] [inlinecmt, //member function definition, 28] 
[opencubr, {, 29]
[return, return, 30][openpar, (, 30] [intnum, 0, 30] [closepar, ), 30] [semi, ;, 30] 
[closecubr, }, 31]
[func, func, 32][id, evaluate1, 32] [openpar, (, 32] [id, x, 32] [colon, :, 32] [integer, integer, 32] [closepar, ), 32] [arrow, ->, 32] [integer, integer, 32] [inlinecmt, //multiple member function definitions, 32] 
[opencubr, {, 33]
[return, return, 34][openpar, (, 34] [intnum, 0, 34] [closepar, ), 34] [semi, ;, 34] 
[closecubr, }, 35]
[closecubr, }, 36]
[impl, impl, 38][id, LINEAR, 38] [opencubr, {, 38] 
[func, func, 39][id, build, 39] [openpar, (, 39] [id, A, 39] [colon, :, 39] [float, float, 39] [comma, ,, 39] [id, B, 39] [colon, :, 39] [float, float, 39] [closepar, ), 39] [arrow, ->, 39] [id, LINEAR, 39] [inlinecmt, // return type id, 39] 
[opencubr, {, 40]
[let, let, 41][id, new_function, 41] [colon, :, 41] [id, LINEAR, 41] [semi, ;, 41] 
[id, new_function, 42][dot, ., 42] [id, a, 42] [assign, =, 42] [id, A, 42] [semi, ;, 42] 
[id, new_function, 43][dot, ., 43] [id, b, 43] [assign, =, 43] [id, B, 43] [semi, ;, 43] 
[return, return, 44][openpar, (, 44] [id, new_function, 44] [closepar, ), 44] [semi, ;, 44] 
[closecubr, }, 45]
[func, func, 46][id, evaluate, 46] [openpar, (, 46] [id, x, 46] [colon, :, 46] [float, float, 46] [closepar, ), 46] [arrow, ->, 46] [float, float, 46] 
[opencubr, {, 47]
[let, let, 48][id, result, 48] [colon, :, 48] [float, float, 48] [semi, ;, 48] 
[id, result, 49][assign, =, 49] [floatnum, 0.0, 49] [semi, ;, 49] 
[id, result, 50][assign, =, 50] [id, a, 50] [mult, *, 50] [id, x, 50] [plus, +, 50] [id, b, 50] [semi, ;, 50] 
[return, return, 51][openpar, (, 51] [id, result, 51] [closepar, ), 51] [semi, ;, 51] 
[closecubr, }, 52]
[closecubr, }, 53]
[blockcmt, /* sort the array */, 56]
[func, func, 57][id, bubbleSort, 57] [openpar, (, 57] [id, arr, 57] [colon, :, 57] [integer, integer, 57] [opensqbr, [, 57] [closesqbr, ], 57] [comma, ,, 57] [id, size, 57] [colon, :, 57] [integer, integer, 57] [closepar, ), 57] [arrow, ->, 57] [void, void, 57] 
[opencubr, {, 58]
[let, let, 59][id, n, 59] [colon, :, 59] [integer, integer, 59] [semi, ;, 59] 
[let, let, 60][id, i, 60] [colon, :, 60] [integer, integer, 60] [semi, ;, 60] 
[let, let, 61][id, j, 61] [colon, :, 61] [integer, integer, 61] [semi, ;, 61] 
[let, let, 62][id, temp, 62] [colon, :, 62] [integer, integer, 62] [semi, ;, 62] 
[id, n, 63][assign, =, 63] [id, size, 63] [semi, ;, 63] 
[id, i, 64][assign, =, 64] [intnum, 0, 64] [semi, ;, 64] 
[id, j, 65][assign, =, 65] [intnum, 0, 65] [semi, ;, 65] 
[id, temp, 66][assign, =, 66] [intnum, 0, 66] [semi, ;, 66] 
[while, while, 67][openpar, (, 67] [id, i, 67] [lt, <, 67] [id, n, 67] [minus, -, 67] [intnum, 1, 67] [closepar, ), 67] [opencubr, {, 67] 
[while, while, 68][openpar, (, 68] [id, j, 68] [lt, <, 68] [id, n, 68] [minus, -, 68] [id, i, 68] [minus, -, 68] [intnum, 1, 68] [closepar, ), 68] [opencubr, {, 68] 
[if, if, 69][openpar, (, 69] [id, arr, 69] [opensqbr, [, 69] [id, j, 69] [closesqbr, ], 69] [gt, >, 69] [id, arr, 69] [opensqbr, [, 69] [id, j, 69] [plus, +, 69] [intnum, 1, 69] [closesqbr, ], 69] [closepar, ), 69] [inlinecmt, // if statement, 69] 
[then, then, 70][opencubr, {, 70] 
[inlinecmt, // swap temp and arr[i], 71]
[id, temp, 72][assign, =, 72] [id, arr, 72] [opensqbr, [, 72] [id, j, 72] [closesqbr, ], 72] [semi, ;, 72] 
[id, arr, 73][opensqbr, [, 73] [id, j, 73] [closesqbr, ], 73] [assign, =, 73] [id, arr, 73] [opensqbr, [, 73] [id, j, 73] [plus, +, 73] [intnum, 1, 73] [closesqbr, ], 73] [semi, ;, 73] 
[id, arr, 74][opensqbr, [, 74] [id, j, 74] [plus, +, 74] [intnum, 1, 74] [closesqbr, ], 74] [assign, =, 74] [id, temp, 74] [semi, ;, 74] 
[closecubr, }, 75][else, else, 75] [semi, ;, 75] 
[id, j, 76][assign, =, 76] [id, j, 76] [plus, +, 76] [intnum, 1, 76] [semi, ;, 76] 
[closecubr, }, 77][semi, ;, 77] 
[id, i, 78][assign, =, 78] [id, i, 78] [plus, +, 78] [intnum, 1, 78] [semi, ;, 78] 
[closecubr, }, 79][semi, ;, 79] 
[closecubr, }, 80]
[blockcmt, /* print the array */, 82]
[func, func, 83][id, printArray, 83] [openpar, (, 83] [id, arr, 83] [colon, :, 83] [integer, integer, 83] [opensqbr, [, 83] [closesqbr, ], 83] [comma, ,, 83] [id, size, 83] [colon, :, 83] [integer, integer, 83] [closepar, ), 83] [arrow, ->, 83] [void, void, 83] 
[opencubr, {, 84]
[let, let, 85][id, n, 85] [colon, :, 85] [integer, integer, 85] [semi, ;, 85] 
[let, let, 86][id, i, 86] [colon, :, 86] [integer, integer, 86] [semi, ;, 86] 
[id, n, 87][assign, =, 87] [id, size, 87] [semi, ;, 87] 
[id, i, 88][assign, =, 88] [intnum, 0, 88] [semi, ;, 88] 
[while, while, 89][openpar, (, 89] [id, i, 89] [lt, <, 89] [id, n, 89] [closepar, ), 89] [opencubr, {, 89] 
[write, write, 90][openpar, (, 90] [id, arr, 90] [opensqbr, [, 90] [id, i, 90] [closesqbr, ], 90] [closepar, ), 90] [semi, ;, 90] 
[id, i, 91][assign, =, 91] [id, i, 91] [plus, +, 91] [intnum, 1, 91] [semi, ;, 91] 
[closecubr, }, 92][semi, ;, 92] 
[closecubr, }, 93]
[func, func, 95][id, printNumbers, 95] [openpar, (, 95] [id, arr, 95] [colon, :, 95] [integer, integer, 95] [opensqbr, [, 95] [intnum, 10, 95] [closesqbr, ], 95] [comma, ,, 95] [id, ndim, 95] [colon, :, 95] [integer, integer, 95] [opensqbr, [, 95] [intnum, 10, 95] [closesqbr, ], 95] [opensqbr, [, 95] [intnum, 20, 95] [closesqbr, ], 95] [closepar, ), 95] [arrow, ->, 95] [void, void, 95] 
[inlinecmt, // function formal parameters - array with size and n-dimensions, 96]
[opencubr, {, 97]
[let, let, 98][id, i, 98] [colon, :, 98] [integer, integer, 98] [semi, ;, 98] 
[id, i, 99][assign, =, 99] [intnum, 0, 99] [semi, ;, 99] 
[while, while, 100][openpar, (, 100] [id, i, 100] [lt, <, 100] [intnum, 10, 100] [closepar, ), 100] [opencubr, {, 100] 
[write, write, 101][openpar, (, 101] [id, arr, 101] [opensqbr, [, 101] [id, i, 101] [closesqbr, ], 101] [closepar, ), 101] [semi, ;, 101] 
[id, i, 102][assign, =, 102] [id, i, 102] [plus, +, 102] [intnum, 1, 102] [semi, ;, 102] 
[closecubr, }, 103][semi, ;, 103] 
[closecubr, }, 104]
[func, func, 105][id, testFormalParametersTypeID, 105] [openpar, (, 105] [id, lin, 105] [colon, :, 105] [id, LINEAR, 105] [closepar, ), 105] [arrow, ->, 105] [void, void, 105] [inlinecmt, //testing the formal parameter with type id, 105] 
[opencubr, {, 106]
[return, return, 107][openpar, (, 107] [intnum, 0, 107] [closepar, ), 107] [semi, ;, 107] 
[closecubr, }, 108]
[func, func, 110][id, noParameters, 110] [openpar, (, 110] [closepar, ), 110] [arrow, ->, 110] [void, void, 110] [inlinecmt, // function defintion with no parameter, 110] 
[opencubr, {, 111]
[return, return, 112][openpar, (, 112] [intnum, 0, 112] [closepar, ), 112] [semi, ;, 112] [inlinecmt, // function body one statement, 112] 
[closecubr, }, 113]
[func, func, 115][id, noLocalVariableDeclBlock, 115] [openpar, (, 115] [closepar, ), 115] [arrow, ->, 115] [void, void, 115] [inlinecmt, //no local variable block, 115] 
[opencubr, {, 116]
[inlinecmt, //function body no statment, 117]
[closecubr, }, 118]
[inlinecmt, // ====== main ====== //, 120]
[func, func, 121][id, main, 121] [openpar, (, 121] [closepar, ), 121] [arrow, ->, 121] [void, void, 121] 
[opencubr, {, 122]
[let, let, 123][id, arr, 123] [colon, :, 123] [integer, integer, 123] [opensqbr, [, 123] [intnum, 7, 123] [closesqbr, ], 123] [semi, ;, 123] 
[id, arr, 124][opensqbr, [, 124] [intnum, 0, 124] [closesqbr, ], 124] [assign, =, 124] [intnum, 64, 124] [semi, ;, 124] 
[id, arr, 125][opensqbr, [, 125] [intnum, 1, 125] [closesqbr, ], 125] [assign, =, 125] [intnum, 34, 125] [semi, ;, 125] 
[id, arr, 126][opensqbr, [, 126] [intnum, 2, 126] [closesqbr, ], 126] [assign, =, 126] [intnum, 25, 126] [semi, ;, 126] 
[id, arr, 127][opensqbr, [, 127] [intnum, 3, 127] [closesqbr, ], 127] [assign, =, 127] [intnum, 12, 127] [semi, ;, 127] 
[id, arr, 128][opensqbr, [, 128] [intnum, 4, 128] [closesqbr, ], 128] [assign, =, 128] [intnum, 22, 128] [semi, ;, 128] 
[id, arr, 129][opensqbr, [, 129] [intnum, 5, 129] [closesqbr, ], 129] [assign, =, 129] [intnum, 11, 129] [semi, ;, 129] 
[id, arr, 130][opensqbr, [, 130] [intnum, 6, 130] [closesqbr, ], 130] [assign, =, 130] [intnum, 90, 130] [semi, ;, 130] 
[let, let, 132][id, ndim, 132] [colon, :, 132] [integer, integer, 132] [opensqbr, [, 132] [intnum, 1, 132] [closesqbr, ], 132] [opensqbr, [, 132] [intnum, 7, 132] [closesqbr, ], 132] [semi, ;, 132] 
[id, ndim, 133][opensqbr, [, 133] [intnum, 0, 133] [closesqbr, ], 133] [opensqbr, [, 133] [intnum, 1, 133] [closesqbr, ], 133] [assign, =, 133] [intnum, 64, 133] [semi, ;, 133] 
[id, ndim, 134][opensqbr, [, 134] [intnum, 0, 134] [closesqbr, ], 134] [opensqbr, [, 134] [intnum, 2, 134] [closesqbr, ], 134] [assign, =, 134] [intnum, 34, 134] [semi, ;, 134] 
[id, ndim, 135][opensqbr, [, 135] [intnum, 0, 135] [closesqbr, ], 135] [opensqbr, [, 135] [intnum, 3, 135] [closesqbr, ], 135] [assign, =, 135] [intnum, 25, 135] [semi, ;, 135] 
[id, ndim, 136][opensqbr, [, 136] [intnum, 0, 136] [closesqbr, ], 136] [opensqbr, [, 136] [intnum, 4, 136] [closesqbr, ], 136] [assign, =, 136] [intnum, 12, 136] [semi, ;, 136] 
[id, ndim, 137][opensqbr, [, 137] [intnum, 0, 137] [closesqbr, ], 137] [opensqbr, [, 137] [intnum, 5, 137] [closesqbr, ], 137] [assign, =, 137] [intnum, 22, 137] [semi, ;, 137] 
[id, ndim, 138][opensqbr, [, 138] [intnum, 0, 138] [closesqbr, ], 138] [opensqbr, [, 138] [intnum, 6, 138] [closesqbr, ], 138] [assign, =, 138] [intnum, 11, 138] [semi, ;, 138] 
[id, ndim, 139][opensqbr, [, 139] [intnum, 0, 139] [closesqbr, ], 139] [opensqbr, [, 139] [intnum, 7, 139] [closesqbr, ], 139] [assign, =, 139] [intnum, 90, 139] [semi, ;, 139] 
[id, printarray, 140][openpar, (, 140] [id, arr, 140] [comma, ,, 140] [intnum, 7, 140] [closepar, ), 140] [semi, ;, 140] [inlinecmt, // multiple free function definitions, 140] 
[id, bubbleSort, 142][openpar, (, 142] [id, arr, 142] [comma, ,, 142] [intnum, 7, 142] [closepar, ), 142] [semi, ;, 142] [inlinecmt, // free function call, 142] 
[id, noParameters, 144][openpar, (, 144] [closepar, ), 144] [semi, ;, 144] [inlinecmt, //function call with no parameters, 144] 
[id, printarray, 146][openpar, (, 146] [id, arr, 146] [comma, ,, 146] [intnum, 7, 146] [closepar, ), 146] [semi, ;, 146] [inlinecmt, // function call with array - 1dimension and no size, 146] 
[id, printNumbers, 148][openpar, (, 148] [id, arr, 148] [comma, ,, 148] [id, ndim, 148] [closepar, ), 148] [semi, ;, 148] [inlinecmt, // function call with array -  2dimension, 148] 
[id, printNumbers, 150][openpar, (, 150] [id, arr, 150] [comma, ,, 150] [id, ndim, 150] [opensqbr, [, 150] [intnum, 1, 150] [closesqbr, ], 150] [opensqbr, [, 150] [intnum, 2, 150] [closesqbr, ], 150] [closepar, ), 150] [semi, ;, 150] [inlinecmt, // function call with array with size, 150] 
[id, printarray, 152][openpar, (, 152] [id, arr, 152] [comma, ,, 152] [intnum, 0, 152] [plus, +, 152] [intnum, 7, 152] [closepar, ), 152] [semi, ;, 152] [inlinecmt, //function call with expression as parameter, 152] 
[let, let, 154][id, i, 154] [colon, :, 154] [integer, integer, 154] [semi, ;, 154] [inlinecmt, //variable type integer, 154] 
[let, let, 155][id, f, 155] [colon, :, 155] [float, float, 155] [semi, ;, 155] [inlinecmt, //variable type float, 155] 
[let, let, 156][id, arr1, 156] [colon, :, 156] [integer, integer, 156] [opensqbr, [, 156] [intnum, 7, 156] [closesqbr, ], 156] [semi, ;, 156] [inlinecmt, //variable type array - 1D with size, 156] 
[let, let, 157][id, arr1, 157] [colon, :, 157] [integer, integer, 157] [opensqbr, [, 157] [closesqbr, ], 157] [semi, ;, 157] [inlinecmt, //variable type array - 1D without size, 157] 
[let, let, 158][id, arr2, 158] [colon, :, 158] [integer, integer, 158] [opensqbr, [, 158] [intnum, 7, 158] [closesqbr, ], 158] [opensqbr, [, 158] [intnum, 7, 158] [closesqbr, ], 158] [semi, ;, 158] [inlinecmt, //variable type array - nDim, 158] 
[let, let, 160][id, f1, 160] [colon, :, 160] [id, LINEAR, 160] [semi, ;, 160] [inlinecmt, // variable declaration ID, 160] 
[let, let, 161][id, f2, 161] [colon, :, 161] [id, QUADRATIC, 161] [semi, ;, 161] 
[let, let, 162][id, counter, 162] [colon, :, 162] [integer, integer, 162] [semi, ;, 162] 
[id, f1, 163][assign, =, 163] [id, f1, 163] [dot, ., 163] [id, build, 163] [openpar, (, 163] [intnum, 2, 163] [comma, ,, 163] [floatnum, 3.5, 163] [closepar, ), 163] [semi, ;, 163] 
[id, f2, 164][assign, =, 164] [id, f2, 164] [dot, ., 164] [id, build, 164] [openpar, (, 164] [minus, -, 164] [floatnum, 2.0, 164] [comma, ,, 164] [floatnum, 1.0, 164] [comma, ,, 164] [floatnum, 0.0, 164] [closepar, ), 164] [semi, ;, 164] 
[id, counter, 165][assign, =, 165] [intnum, 1, 165] [semi, ;, 165] 
[while, while, 166][openpar, (, 166] [id, counter, 166] [leq, <=, 166] [intnum, 10, 166] [closepar, ), 166] [inlinecmt, //using relop, 166] 
[opencubr, {, 167]
[write, write, 168][openpar, (, 168] [id, counter, 168] [closepar, ), 168] [semi, ;, 168] 
[write, write, 169][openpar, (, 169] [id, f1, 169] [dot, ., 169] [id, evaluate, 169] [openpar, (, 169] [id, counter, 169] [closepar, ), 169] [closepar, ), 169] [semi, ;, 169] 
[write, write, 170][openpar, (, 170] [id, f2, 170] [dot, ., 170] [id, evaluate, 170] [openpar, (, 170] [id, counter, 170] [closepar, ), 170] [closepar, ), 170] [semi, ;, 170] [inlinecmt, //write, 170] 
[read, read, 171][openpar, (, 171] [id, a, 171] [dot, ., 171] [id, b, 171] [closepar, ), 171] [semi, ;, 171] [inlinecmt, // read, 171] 
[return, return, 172][openpar, (, 172] [id, a, 172] [mult, *, 172] [id, b, 172] [closepar, ), 172] [semi, ;, 172] [inlinecmt, // return, 172] 
[closecubr, }, 173][semi, ;, 173] 
[id, a, 175][assign, =, 175] [intnum, 2, 175] [plus, +, 175] [intnum, 3, 175] [semi, ;, 175] [inlinecmt, //addop, 175] 
[id, a, 176][assign, =, 176] [intnum, 2, 176] [mult, *, 176] [intnum, 3, 176] [semi, ;, 176] [inlinecmt, //multop, 176] 
[id, z, 177][assign, =, 177] [id, a, 177] [mult, *, 177] [id, b, 177] [plus, +, 177] [intnum, 1, 177] [semi, ;, 177] [inlinecmt, //multop and addop, 177] 
[while, while, 178][openpar, (, 178] [openpar, (, 178] [id, a, 178] [mult, *, 178] [id, b, 178] [plus, +, 178] [intnum, 1, 178] [closepar, ), 178] [lt, <, 178] [intnum, 0, 178] [closepar, ), 178] [inlinecmt, // involving addop + multop + relop, 178] 
[opencubr, {, 179]
[closecubr, }, 180][semi, ;, 180] 
[while, while, 181][openpar, (, 181] [openpar, (, 181] [id, a, 181] [mult, *, 181] [id, b, 181] [closepar, ), 181] [gt, >, 181] [intnum, 0, 181] [closepar, ), 181] [inlinecmt, // involving multop + relop, 181] 
[opencubr, {, 182]
[closecubr, }, 183][semi, ;, 183] 
[id, a, 184][assign, =, 184] [not, !, 184] [intnum, 0, 184] [semi, ;, 184] [inlinecmt, // not operator, 184] 
[return, return, 186][openpar, (, 186] [openpar, (, 186] [id, a, 186] [closepar, ), 186] [plus, +, 186] [openpar, (, 186] [id, b, 186] [closepar, ), 186] [minus, -, 186] [openpar, (, 186] [minus, -, 186] [id, c, 186] [closepar, ), 186] [mult, *, 186] [openpar, (, 186] [not, !, 186] [id, d, 186] [closepar, ), 186] [eq, ==, 186] [intnum, 0, 186] [closepar, ), 186] [semi, ;, 186] [inlinecmt, // involving all the above in one expression, 186] 
[id, a, 188][assign, =, 188] [intnum, 2, 188] [plus, +, 188] [openpar, (, 188] [intnum, 3, 188] [mult, *, 188] [openpar, (, 188] [intnum, 3, 188] [plus, +, 188] [intnum, 5, 188] [closepar, ), 188] [closepar, ), 188] [semi, ;, 188] [inlinecmt, //nested parenthesis, 188] 
[if, if, 190][openpar, (, 190] [intnum, 3, 190] [gt, >, 190] [intnum, 4, 190] [closepar, ), 190] [inlinecmt, // empty if else block, 190] 
[then, then, 191]
[opencubr, {, 192]
[closecubr, }, 193]
[else, else, 194][opencubr, {, 194] 
[closecubr, }, 195][semi, ;, 195] 
[if, if, 196][openpar, (, 196] [intnum, 3, 196] [geq, >=, 196] [intnum, 4, 196] [closepar, ), 196] [inlinecmt, // if: 1-statement then or else blocks, 196] 
[then, then, 197][opencubr, {, 197] 
[id, a, 198][assign, =, 198] [intnum, 3, 198] [semi, ;, 198] 
[closecubr, }, 199]
[else, else, 200][opencubr, {, 200] 
[id, b, 201][assign, =, 201] [intnum, 4, 201] [semi, ;, 201] 
[closecubr, }, 202][semi, ;, 202] 
[if, if, 204][openpar, (, 204] [intnum, 3, 204] [leq, <=, 204] [intnum, 4, 204] [closepar, ), 204] [inlinecmt, // if: n-statement then or else blocks, 204] 
[then, then, 205][opencubr, {, 205] 
[id, a, 206][assign, =, 206] [intnum, 3, 206] [semi, ;, 206] 
[id, b, 207][assign, =, 207] [intnum, 4, 207] [semi, ;, 207] 
[closecubr, }, 208]
[else, else, 209][opencubr, {, 209] 
[id, b, 210][assign, =, 210] [intnum, 4, 210] [semi, ;, 210] 
[id, a, 211][assign, =, 211] [intnum, 3, 211] [semi, ;, 211] 
[closecubr, }, 212][semi, ;, 212] 
[while, while, 213][openpar, (, 213] [intnum, 3, 213] [noteq, <>, 213] [intnum, 4, 213] [closepar, ), 213] [opencubr, {, 213] [inlinecmt, // empty while block, 213] 
[closecubr, }, 214][semi, ;, 214] 
[closecubr, }, 215]
[blockcmt, /*\n    classes\n    --------------------------------------\n| | no class declaration\n|X| class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n|X| no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n|X| no member\n| | no inherited class\n|X| one inherited class\n|X| multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n| | no free function definition\n|X| free function definition\n|X| multiple free function definitions\n|X| no member function definition\n|X| member function definition\n|X| multiple member function definitions\n|X| return type: void\n|X| return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n|X| type: integer\n|X| type: float\n|X| type: id\n|X| type: 1-dim array\n|X| type: n-dim array\n|X| type: array (with size)\n|X| type: array (without size)\n\n    functions: calls\n    --------------------------------------\n|X| free function call\n|X| member function call\n|X| parameters:0\n|X| parameters:1\n|X| parameters:n\n|X| array parameter - 1-dim\n|X| array parameter - n-dim\n|X| array parameter - with size\n|X| array parameter - without size\n|X| function call as statement\n|X| function call as expression factor\n|X| expression as parameter\n\n    variable declaration\n    --------------------------------------\n|X| type: integer\n|X| type: float\n|| type: string\n|X| type: id\n|X| type: 1-dim array\n|X| type: n-dim array\n|X| type: array (with size)\n| | type: array (without size) (not allowed)\n\n    function body: local variable declarations\n    --------------------------------------\n|X| no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n|X| no statement\n|X| 1 statement\n|X| n statements\n|X| if statement\n|X| if: empty then or else blocks\n|X| if: 1-statement then or else blocks\n|X| if: n-statements then or else blocks\n|X| while statement\n|X| while: empty block\n|X| while: 1-statement block\n|X| while: n-statement block\n|X| read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    expressions\n    --------------------------------------\n|X| single variable\n|X| involving addop\n|X| involving multop\n|X| involving relop\n|X| involving addop + multop\n|X| involving multop + relop\n|X| involving addop + multop + relop\n|X| involving parentheses\n|X| involving nested parentheses\n|X| involving not\n|X| involving sign\n|| involving literals\n|X| involving variable + idnest\n|X| involving function calls\n|X| involving all the above in one expression\n*/, 217]
