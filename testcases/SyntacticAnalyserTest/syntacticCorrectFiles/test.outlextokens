[inlinecmt, // ====== Class declarations ====== //, 1] 
[struct, struct, 2][id, POLYNOMIAL0, 2] [opencubr, {, 2] 
[inlinecmt, //no member, 3]
[closecubr, }, 4][semi, ;, 4] 
[struct, struct, 5][id, POLYNOMIAL1, 5] [opencubr, {, 5] 
[private, private, 6][let, let, 6] [id, a, 6] [colon, :, 6] [float, float, 6] [semi, ;, 6] 
[private, private, 7][let, let, 7] [id, b, 7] [colon, :, 7] [float, float, 7] [semi, ;, 7] [inlinecmt, //no member function declaration, 7] 
[closecubr, }, 8][semi, ;, 8] 
[struct, struct, 10][id, LINEAR, 10] [inherits, inherits, 10] [id, POLYNOMIAL, 10] [opencubr, {, 10] [inlinecmt, //inherits one class, 10] 
[private, private, 11][let, let, 11] [id, a, 11] [colon, :, 11] [float, float, 11] [semi, ;, 11] 
[private, private, 12][let, let, 12] [id, b, 12] [colon, :, 12] [float, float, 12] [semi, ;, 12] 
[public, public, 13][func, func, 13] [id, build, 13] [openpar, (, 13] [id, A, 13] [colon, :, 13] [float, float, 13] [comma, ,, 13] [id, B, 13] [colon, :, 13] [float, float, 13] [closepar, ), 13] [arrow, ->, 13] [id, LINEAR, 13] [semi, ;, 13] 
[public, public, 14][func, func, 14] [id, evaluate, 14] [openpar, (, 14] [id, x, 14] [colon, :, 14] [float, float, 14] [closepar, ), 14] [arrow, ->, 14] [float, float, 14] [semi, ;, 14] 
[closecubr, }, 15][semi, ;, 15] 
[struct, struct, 17][id, QUADRATIC, 17] [inherits, inherits, 17] [id, POLYNOMIAL0, 17] [comma, ,, 17] [id, POLYNOMIAL1, 17] [opencubr, {, 17] [inlinecmt, // multiple inherited class, 17] 
[private, private, 18][let, let, 18] [id, a, 18] [colon, :, 18] [float, float, 18] [semi, ;, 18] 
[public, public, 19][let, let, 19] [id, b, 19] [colon, :, 19] [float, float, 19] [semi, ;, 19] 
[public, public, 20][let, let, 20] [id, c, 20] [colon, :, 20] [float, float, 20] [semi, ;, 20] 
[public, public, 21][func, func, 21] [id, build, 21] [openpar, (, 21] [id, A, 21] [colon, :, 21] [float, float, 21] [comma, ,, 21] [id, B, 21] [colon, :, 21] [float, float, 21] [comma, ,, 21] [id, C, 21] [colon, :, 21] [float, float, 21] [closepar, ), 21] [arrow, ->, 21] [id, QUADRATIC, 21] [semi, ;, 21] 
[public, public, 22][func, func, 22] [id, evaluate, 22] [openpar, (, 22] [id, x, 22] [colon, :, 22] [float, float, 22] [closepar, ), 22] [arrow, ->, 22] [float, float, 22] [semi, ;, 22] 
[public, public, 23][func, func, 23] [id, evaluate1, 23] [openpar, (, 23] [id, x, 23] [colon, :, 23] [integer, integer, 23] [closepar, ), 23] [arrow, ->, 23] [integer, integer, 23] [semi, ;, 23] 
[closecubr, }, 24][semi, ;, 24] 
[inlinecmt, // ====== struct implementations ====== //, 26]
[impl, impl, 27][id, POLYNOMIAL1, 27] [opencubr, {, 27] 
[func, func, 28][id, evaluate, 28] [openpar, (, 28] [id, x, 28] [colon, :, 28] [float, float, 28] [closepar, ), 28] [arrow, ->, 28] [float, float, 28] [inlinecmt, //member function definition, 28] 
[opencubr, {, 29]
[return, return, 30][openpar, (, 30] [intnum, 0, 30] [closepar, ), 30] [semi, ;, 30] 
[closecubr, }, 31]
[func, func, 32][id, evaluate1, 32] [openpar, (, 32] [id, x, 32] [colon, :, 32] [integer, integer, 32] [closepar, ), 32] [arrow, ->, 32] [integer, integer, 32] [inlinecmt, //multiple member function definitions, 32] 
[opencubr, {, 33]
[return, return, 34][openpar, (, 34] [intnum, 0, 34] [closepar, ), 34] [semi, ;, 34] 
[closecubr, }, 35]
[closecubr, }, 36]
[impl, impl, 38][id, LINEAR, 38] [opencubr, {, 38] 
[func, func, 39][id, build, 39] [openpar, (, 39] [id, A, 39] [colon, :, 39] [float, float, 39] [comma, ,, 39] [id, B, 39] [colon, :, 39] [float, float, 39] [closepar, ), 39] [arrow, ->, 39] [id, LINEAR, 39] [inlinecmt, // return type id, 39] 
[opencubr, {, 40]
[let, let, 41][id, new_function, 41] [colon, :, 41] [id, LINEAR, 41] [semi, ;, 41] 
[id, new_function, 42][dot, ., 42] [id, a, 42] [assign, =, 42] [id, A, 42] [semi, ;, 42] 
[id, new_function, 43][dot, ., 43] [id, b, 43] [assign, =, 43] [id, B, 43] [semi, ;, 43] 
[return, return, 44][openpar, (, 44] [id, new_function, 44] [closepar, ), 44] [semi, ;, 44] 
[closecubr, }, 45]
[func, func, 46][id, evaluate, 46] [openpar, (, 46] [id, x, 46] [colon, :, 46] [float, float, 46] [closepar, ), 46] [arrow, ->, 46] [float, float, 46] 
[opencubr, {, 47]
[let, let, 48][id, result, 48] [colon, :, 48] [float, float, 48] [semi, ;, 48] 
[id, result, 49][assign, =, 49] [floatnum, 0.0, 49] [semi, ;, 49] 
[id, result, 50][assign, =, 50] [id, a, 50] [mult, *, 50] [id, x, 50] [plus, +, 50] [id, b, 50] [semi, ;, 50] 
[return, return, 51][openpar, (, 51] [id, result, 51] [closepar, ), 51] [semi, ;, 51] 
[closecubr, }, 52]
[closecubr, }, 53]
[blockcmt, /* sort the array */, 56]
[func, func, 57][id, bubbleSort, 57] [openpar, (, 57] [id, arr, 57] [colon, :, 57] [integer, integer, 57] [opensqbr, [, 57] [closesqbr, ], 57] [comma, ,, 57] [id, size, 57] [colon, :, 57] [integer, integer, 57] [closepar, ), 57] [arrow, ->, 57] [void, void, 57] 
[opencubr, {, 58]
[let, let, 59][id, n, 59] [colon, :, 59] [integer, integer, 59] [semi, ;, 59] 
[let, let, 60][id, i, 60] [colon, :, 60] [integer, integer, 60] [semi, ;, 60] 
[let, let, 61][id, j, 61] [colon, :, 61] [integer, integer, 61] [semi, ;, 61] 
[let, let, 62][id, temp, 62] [colon, :, 62] [integer, integer, 62] [semi, ;, 62] 
[id, n, 63][assign, =, 63] [id, size, 63] [semi, ;, 63] 
[id, i, 64][assign, =, 64] [intnum, 0, 64] [semi, ;, 64] 
[id, j, 65][assign, =, 65] [intnum, 0, 65] [semi, ;, 65] 
[id, temp, 66][assign, =, 66] [intnum, 0, 66] [semi, ;, 66] 
[while, while, 67][openpar, (, 67] [id, i, 67] [lt, <, 67] [id, n, 67] [minus, -, 67] [intnum, 1, 67] [closepar, ), 67] [opencubr, {, 67] 
[while, while, 68][openpar, (, 68] [id, j, 68] [lt, <, 68] [id, n, 68] [minus, -, 68] [id, i, 68] [minus, -, 68] [intnum, 1, 68] [closepar, ), 68] [opencubr, {, 68] 
[if, if, 69][openpar, (, 69] [id, arr, 69] [opensqbr, [, 69] [id, j, 69] [closesqbr, ], 69] [gt, >, 69] [id, arr, 69] [opensqbr, [, 69] [id, j, 69] [plus, +, 69] [intnum, 1, 69] [closesqbr, ], 69] [closepar, ), 69] [inlinecmt, // if statement, 69] 
[then, then, 70][opencubr, {, 70] 
[inlinecmt, // swap temp and arr[i], 71]
[id, temp, 72][assign, =, 72] [id, arr, 72] [opensqbr, [, 72] [id, j, 72] [closesqbr, ], 72] [semi, ;, 72] 
[id, arr, 73][opensqbr, [, 73] [id, j, 73] [closesqbr, ], 73] [assign, =, 73] [id, arr, 73] [opensqbr, [, 73] [id, j, 73] [plus, +, 73] [intnum, 1, 73] [closesqbr, ], 73] [semi, ;, 73] 
[id, arr, 74][opensqbr, [, 74] [id, j, 74] [plus, +, 74] [intnum, 1, 74] [closesqbr, ], 74] [assign, =, 74] [id, temp, 74] [semi, ;, 74] 
[closecubr, }, 75][else, else, 75] [semi, ;, 75] 
[id, j, 76][assign, =, 76] [id, j, 76] [plus, +, 76] [intnum, 1, 76] [semi, ;, 76] 
[closecubr, }, 77][semi, ;, 77] 
[id, i, 78][assign, =, 78] [id, i, 78] [plus, +, 78] [intnum, 1, 78] [semi, ;, 78] 
[closecubr, }, 79][semi, ;, 79] 
[closecubr, }, 80]
[blockcmt, /* print the array */, 82]
[func, func, 83][id, printArray, 83] [openpar, (, 83] [id, arr, 83] [colon, :, 83] [integer, integer, 83] [opensqbr, [, 83] [closesqbr, ], 83] [comma, ,, 83] [id, size, 83] [colon, :, 83] [integer, integer, 83] [closepar, ), 83] [arrow, ->, 83] [void, void, 83] 
[opencubr, {, 84]
[let, let, 85][id, n, 85] [colon, :, 85] [integer, integer, 85] [semi, ;, 85] 
[let, let, 86][id, i, 86] [colon, :, 86] [integer, integer, 86] [semi, ;, 86] 
[id, n, 87][assign, =, 87] [id, size, 87] [semi, ;, 87] 
[id, i, 88][assign, =, 88] [intnum, 0, 88] [semi, ;, 88] 
[while, while, 89][openpar, (, 89] [id, i, 89] [lt, <, 89] [id, n, 89] [closepar, ), 89] [opencubr, {, 89] 
[write, write, 90][openpar, (, 90] [id, arr, 90] [opensqbr, [, 90] [id, i, 90] [closesqbr, ], 90] [closepar, ), 90] [semi, ;, 90] 
[id, i, 91][assign, =, 91] [id, i, 91] [plus, +, 91] [intnum, 1, 91] [semi, ;, 91] 
[closecubr, }, 92][semi, ;, 92] 
[closecubr, }, 93]
[func, func, 95][id, printNumbers, 95] [openpar, (, 95] [id, arr, 95] [colon, :, 95] [integer, integer, 95] [opensqbr, [, 95] [intnum, 10, 95] [closesqbr, ], 95] [comma, ,, 95] [id, ndim, 95] [colon, :, 95] [integer, integer, 95] [opensqbr, [, 95] [intnum, 10, 95] [closesqbr, ], 95] [opensqbr, [, 95] [intnum, 20, 95] [closesqbr, ], 95] [closepar, ), 95] [arrow, ->, 95] [void, void, 95] 
[inlinecmt, // function formal parameters - array with size and n-dimensions, 96]
[opencubr, {, 97]
[let, let, 98][id, i, 98] [colon, :, 98] [integer, integer, 98] [semi, ;, 98] 
[id, i, 99][assign, =, 99] [intnum, 0, 99] [semi, ;, 99] 
[while, while, 100][openpar, (, 100] [id, i, 100] [lt, <, 100] [intnum, 10, 100] [closepar, ), 100] [opencubr, {, 100] 
[write, write, 101][openpar, (, 101] [id, arr, 101] [opensqbr, [, 101] [id, i, 101] [closesqbr, ], 101] [closepar, ), 101] [semi, ;, 101] 
[id, i, 102][assign, =, 102] [id, i, 102] [plus, +, 102] [intnum, 1, 102] [semi, ;, 102] 
[closecubr, }, 103][semi, ;, 103] 
[closecubr, }, 104]
[func, func, 105][id, testFormalParametersTypeID, 105] [openpar, (, 105] [id, lin, 105] [colon, :, 105] [id, LINEAR, 105] [closepar, ), 105] [arrow, ->, 105] [void, void, 105] [inlinecmt, //testing the formal parameter with type id, 105] 
[opencubr, {, 106]
[return, return, 107][openpar, (, 107] [intnum, 0, 107] [closepar, ), 107] [semi, ;, 107] 
[closecubr, }, 108]
[func, func, 110][id, noParameters, 110] [openpar, (, 110] [closepar, ), 110] [arrow, ->, 110] [void, void, 110] [inlinecmt, // function defintion with no parameter, 110] 
[opencubr, {, 111]
[return, return, 112][openpar, (, 112] [intnum, 0, 112] [closepar, ), 112] [semi, ;, 112] [inlinecmt, // function body one statement, 112] 
[closecubr, }, 113]
[func, func, 115][id, noLocalVariableDeclBlock, 115] [openpar, (, 115] [closepar, ), 115] [arrow, ->, 115] [void, void, 115] [inlinecmt, //no local variable block, 115] 
[opencubr, {, 116]
[inlinecmt, //function body no statment, 117]
[closecubr, }, 118]
[func, func, 120][id, testVariableIdnest, 120] [openpar, (, 120] [closepar, ), 120] [arrow, ->, 120] [void, void, 120] 
[opencubr, {, 121]
[id, x, 122][assign, =, 122] [id, a, 122] [openpar, (, 122] [id, b, 122] [closepar, ), 122] [dot, ., 122] [id, c, 122] [semi, ;, 122] [inlinecmt, //  id(id).id, 122] 
[id, a, 123][openpar, (, 123] [id, b, 123] [closepar, ), 123] [dot, ., 123] [id, c, 123] [openpar, (, 123] [closepar, ), 123] [semi, ;, 123] [inlinecmt, //  id(id).id(), 123] 
[id, a, 124][dot, ., 124] [id, b, 124] [opensqbr, [, 124] [id, c, 124] [closesqbr, ], 124] [assign, =, 124] [intnum, 0, 124] [semi, ;, 124] [inlinecmt, //  id.id[id], 124] 
[id, a, 125][opensqbr, [, 125] [id, b, 125] [closesqbr, ], 125] [dot, ., 125] [id, c, 125] [assign, =, 125] [intnum, 0, 125] [semi, ;, 125] [inlinecmt, //  id[id].id, 125] 
[id, a, 126][opensqbr, [, 126] [id, b, 126] [closesqbr, ], 126] [dot, ., 126] [id, c, 126] [opensqbr, [, 126] [id, d, 126] [closesqbr, ], 126] [assign, =, 126] [intnum, 0, 126] [semi, ;, 126] [inlinecmt, //  id[id].id[id], 126] 
[id, a, 127][dot, ., 127] [id, b, 127] [opensqbr, [, 127] [id, c, 127] [closesqbr, ], 127] [opensqbr, [, 127] [id, d, 127] [closesqbr, ], 127] [assign, =, 127] [intnum, 0, 127] [semi, ;, 127] [inlinecmt, //  d.id[id][id], 127] 
[id, a, 128][opensqbr, [, 128] [id, b, 128] [closesqbr, ], 128] [opensqbr, [, 128] [id, c, 128] [closesqbr, ], 128] [dot, ., 128] [id, d, 128] [assign, =, 128] [intnum, 0, 128] [semi, ;, 128] [inlinecmt, //  id[id][id].id, 128] 
[id, a, 129][opensqbr, [, 129] [id, b, 129] [closesqbr, ], 129] [opensqbr, [, 129] [id, c, 129] [closesqbr, ], 129] [dot, ., 129] [id, d, 129] [opensqbr, [, 129] [id, e, 129] [closesqbr, ], 129] [opensqbr, [, 129] [id, f, 129] [closesqbr, ], 129] [assign, =, 129] [intnum, 0, 129] [semi, ;, 129] [inlinecmt, //  id[id][id].id[id][id], 129] 
[id, x, 130][assign, =, 130] [id, a, 130] [openpar, (, 130] [id, b, 130] [closepar, ), 130] [dot, ., 130] [id, c, 130] [opensqbr, [, 130] [id, d, 130] [closesqbr, ], 130] [semi, ;, 130] [inlinecmt, //  id(id).id[id], 130] 
[id, x, 131][assign, =, 131] [id, a, 131] [openpar, (, 131] [id, b, 131] [closepar, ), 131] [dot, ., 131] [id, c, 131] [opensqbr, [, 131] [id, d, 131] [closesqbr, ], 131] [opensqbr, [, 131] [id, e, 131] [closesqbr, ], 131] [semi, ;, 131] [inlinecmt, //  id(id).id[id][id], 131] 
[id, a, 132][opensqbr, [, 132] [id, m, 132] [plus, +, 132] [id, n, 132] [closesqbr, ], 132] [assign, =, 132] [intnum, 0, 132] [semi, ;, 132] [inlinecmt, //   expression as array index, 132] 
[closecubr, }, 133]
[inlinecmt, // ====== main ====== //, 135]
[func, func, 136][id, main, 136] [openpar, (, 136] [closepar, ), 136] [arrow, ->, 136] [void, void, 136] 
[opencubr, {, 137]
[let, let, 138][id, arr, 138] [colon, :, 138] [integer, integer, 138] [opensqbr, [, 138] [intnum, 7, 138] [closesqbr, ], 138] [semi, ;, 138] 
[id, arr, 139][opensqbr, [, 139] [intnum, 0, 139] [closesqbr, ], 139] [assign, =, 139] [intnum, 64, 139] [semi, ;, 139] 
[id, arr, 140][opensqbr, [, 140] [intnum, 1, 140] [closesqbr, ], 140] [assign, =, 140] [intnum, 34, 140] [semi, ;, 140] 
[id, arr, 141][opensqbr, [, 141] [intnum, 2, 141] [closesqbr, ], 141] [assign, =, 141] [intnum, 25, 141] [semi, ;, 141] 
[id, arr, 142][opensqbr, [, 142] [intnum, 3, 142] [closesqbr, ], 142] [assign, =, 142] [intnum, 12, 142] [semi, ;, 142] 
[id, arr, 143][opensqbr, [, 143] [intnum, 4, 143] [closesqbr, ], 143] [assign, =, 143] [intnum, 22, 143] [semi, ;, 143] 
[id, arr, 144][opensqbr, [, 144] [intnum, 5, 144] [closesqbr, ], 144] [assign, =, 144] [intnum, 11, 144] [semi, ;, 144] 
[id, arr, 145][opensqbr, [, 145] [intnum, 6, 145] [closesqbr, ], 145] [assign, =, 145] [intnum, 90, 145] [semi, ;, 145] 
[let, let, 147][id, ndim, 147] [colon, :, 147] [integer, integer, 147] [opensqbr, [, 147] [intnum, 1, 147] [closesqbr, ], 147] [opensqbr, [, 147] [intnum, 7, 147] [closesqbr, ], 147] [semi, ;, 147] 
[id, ndim, 148][opensqbr, [, 148] [intnum, 0, 148] [closesqbr, ], 148] [opensqbr, [, 148] [intnum, 1, 148] [closesqbr, ], 148] [assign, =, 148] [intnum, 64, 148] [semi, ;, 148] 
[id, ndim, 149][opensqbr, [, 149] [intnum, 0, 149] [closesqbr, ], 149] [opensqbr, [, 149] [intnum, 2, 149] [closesqbr, ], 149] [assign, =, 149] [intnum, 34, 149] [semi, ;, 149] 
[id, ndim, 150][opensqbr, [, 150] [intnum, 0, 150] [closesqbr, ], 150] [opensqbr, [, 150] [intnum, 3, 150] [closesqbr, ], 150] [assign, =, 150] [intnum, 25, 150] [semi, ;, 150] 
[id, ndim, 151][opensqbr, [, 151] [intnum, 0, 151] [closesqbr, ], 151] [opensqbr, [, 151] [intnum, 4, 151] [closesqbr, ], 151] [assign, =, 151] [intnum, 12, 151] [semi, ;, 151] 
[id, ndim, 152][opensqbr, [, 152] [intnum, 0, 152] [closesqbr, ], 152] [opensqbr, [, 152] [intnum, 5, 152] [closesqbr, ], 152] [assign, =, 152] [intnum, 22, 152] [semi, ;, 152] 
[id, ndim, 153][opensqbr, [, 153] [intnum, 0, 153] [closesqbr, ], 153] [opensqbr, [, 153] [intnum, 6, 153] [closesqbr, ], 153] [assign, =, 153] [intnum, 11, 153] [semi, ;, 153] 
[id, ndim, 154][opensqbr, [, 154] [intnum, 0, 154] [closesqbr, ], 154] [opensqbr, [, 154] [intnum, 7, 154] [closesqbr, ], 154] [assign, =, 154] [intnum, 90, 154] [semi, ;, 154] 
[id, printarray, 155][openpar, (, 155] [id, arr, 155] [comma, ,, 155] [intnum, 7, 155] [closepar, ), 155] [semi, ;, 155] [inlinecmt, // multiple free function definitions, 155] 
[id, bubbleSort, 157][openpar, (, 157] [id, arr, 157] [comma, ,, 157] [intnum, 7, 157] [closepar, ), 157] [semi, ;, 157] [inlinecmt, // free function call, 157] 
[id, noParameters, 159][openpar, (, 159] [closepar, ), 159] [semi, ;, 159] [inlinecmt, //function call with no parameters, 159] 
[id, printarray, 161][openpar, (, 161] [id, arr, 161] [comma, ,, 161] [intnum, 7, 161] [closepar, ), 161] [semi, ;, 161] [inlinecmt, // function call with array - 1dimension and no size, 161] 
[id, printNumbers, 163][openpar, (, 163] [id, arr, 163] [comma, ,, 163] [id, ndim, 163] [closepar, ), 163] [semi, ;, 163] [inlinecmt, // function call with array -  2dimension, 163] 
[id, printNumbers, 165][openpar, (, 165] [id, arr, 165] [comma, ,, 165] [id, ndim, 165] [opensqbr, [, 165] [intnum, 1, 165] [closesqbr, ], 165] [opensqbr, [, 165] [intnum, 2, 165] [closesqbr, ], 165] [closepar, ), 165] [semi, ;, 165] [inlinecmt, // function call with array with size, 165] 
[id, printarray, 167][openpar, (, 167] [id, arr, 167] [comma, ,, 167] [intnum, 0, 167] [plus, +, 167] [intnum, 7, 167] [closepar, ), 167] [semi, ;, 167] [inlinecmt, //function call with expression as parameter, 167] 
[let, let, 169][id, i, 169] [colon, :, 169] [integer, integer, 169] [semi, ;, 169] [inlinecmt, //variable type integer, 169] 
[let, let, 170][id, f, 170] [colon, :, 170] [float, float, 170] [semi, ;, 170] [inlinecmt, //variable type float, 170] 
[let, let, 171][id, arr1, 171] [colon, :, 171] [integer, integer, 171] [opensqbr, [, 171] [intnum, 7, 171] [closesqbr, ], 171] [semi, ;, 171] [inlinecmt, //variable type array - 1D with size, 171] 
[let, let, 172][id, arr1, 172] [colon, :, 172] [integer, integer, 172] [opensqbr, [, 172] [closesqbr, ], 172] [semi, ;, 172] [inlinecmt, //variable type array - 1D without size, 172] 
[let, let, 173][id, arr2, 173] [colon, :, 173] [integer, integer, 173] [opensqbr, [, 173] [intnum, 7, 173] [closesqbr, ], 173] [opensqbr, [, 173] [intnum, 7, 173] [closesqbr, ], 173] [semi, ;, 173] [inlinecmt, //variable type array - nDim, 173] 
[let, let, 175][id, f1, 175] [colon, :, 175] [id, LINEAR, 175] [semi, ;, 175] [inlinecmt, // variable declaration ID, 175] 
[let, let, 176][id, f2, 176] [colon, :, 176] [id, QUADRATIC, 176] [semi, ;, 176] 
[let, let, 177][id, counter, 177] [colon, :, 177] [integer, integer, 177] [semi, ;, 177] 
[id, f1, 178][assign, =, 178] [id, f1, 178] [dot, ., 178] [id, build, 178] [openpar, (, 178] [intnum, 2, 178] [comma, ,, 178] [floatnum, 3.5, 178] [closepar, ), 178] [semi, ;, 178] 
[id, f2, 179][assign, =, 179] [id, f2, 179] [dot, ., 179] [id, build, 179] [openpar, (, 179] [minus, -, 179] [floatnum, 2.0, 179] [comma, ,, 179] [floatnum, 1.0, 179] [comma, ,, 179] [floatnum, 0.0, 179] [closepar, ), 179] [semi, ;, 179] 
[id, counter, 180][assign, =, 180] [intnum, 1, 180] [semi, ;, 180] 
[while, while, 181][openpar, (, 181] [id, counter, 181] [leq, <=, 181] [intnum, 10, 181] [closepar, ), 181] [inlinecmt, //using relop, 181] 
[opencubr, {, 182]
[write, write, 183][openpar, (, 183] [id, counter, 183] [closepar, ), 183] [semi, ;, 183] 
[write, write, 184][openpar, (, 184] [id, f1, 184] [dot, ., 184] [id, evaluate, 184] [openpar, (, 184] [id, counter, 184] [closepar, ), 184] [closepar, ), 184] [semi, ;, 184] 
[write, write, 185][openpar, (, 185] [id, f2, 185] [dot, ., 185] [id, evaluate, 185] [openpar, (, 185] [id, counter, 185] [closepar, ), 185] [closepar, ), 185] [semi, ;, 185] [inlinecmt, //write, 185] 
[read, read, 186][openpar, (, 186] [id, a, 186] [dot, ., 186] [id, b, 186] [closepar, ), 186] [semi, ;, 186] [inlinecmt, // read, 186] 
[return, return, 187][openpar, (, 187] [id, a, 187] [mult, *, 187] [id, b, 187] [closepar, ), 187] [semi, ;, 187] [inlinecmt, // return, 187] 
[closecubr, }, 188][semi, ;, 188] 
[id, a, 190][assign, =, 190] [intnum, 2, 190] [plus, +, 190] [intnum, 3, 190] [semi, ;, 190] [inlinecmt, //addop, 190] 
[id, a, 191][assign, =, 191] [intnum, 2, 191] [mult, *, 191] [intnum, 3, 191] [semi, ;, 191] [inlinecmt, //multop, 191] 
[id, z, 192][assign, =, 192] [id, a, 192] [mult, *, 192] [id, b, 192] [plus, +, 192] [intnum, 1, 192] [semi, ;, 192] [inlinecmt, //multop and addop, 192] 
[while, while, 193][openpar, (, 193] [openpar, (, 193] [id, a, 193] [mult, *, 193] [id, b, 193] [plus, +, 193] [intnum, 1, 193] [closepar, ), 193] [lt, <, 193] [intnum, 0, 193] [closepar, ), 193] [inlinecmt, // involving addop + multop + relop, 193] 
[opencubr, {, 194]
[closecubr, }, 195][semi, ;, 195] 
[while, while, 196][openpar, (, 196] [openpar, (, 196] [id, a, 196] [mult, *, 196] [id, b, 196] [closepar, ), 196] [gt, >, 196] [intnum, 0, 196] [closepar, ), 196] [inlinecmt, // involving multop + relop, 196] 
[opencubr, {, 197]
[closecubr, }, 198][semi, ;, 198] 
[id, a, 199][assign, =, 199] [not, !, 199] [intnum, 0, 199] [semi, ;, 199] [inlinecmt, // not operator, 199] 
[return, return, 201][openpar, (, 201] [openpar, (, 201] [id, a, 201] [closepar, ), 201] [plus, +, 201] [openpar, (, 201] [id, b, 201] [closepar, ), 201] [minus, -, 201] [openpar, (, 201] [minus, -, 201] [id, c, 201] [closepar, ), 201] [mult, *, 201] [openpar, (, 201] [not, !, 201] [id, d, 201] [closepar, ), 201] [eq, ==, 201] [intnum, 0, 201] [closepar, ), 201] [semi, ;, 201] [inlinecmt, // involving all the above in one expression, 201] 
[id, a, 203][assign, =, 203] [intnum, 2, 203] [plus, +, 203] [openpar, (, 203] [intnum, 3, 203] [mult, *, 203] [openpar, (, 203] [intnum, 3, 203] [plus, +, 203] [intnum, 5, 203] [closepar, ), 203] [closepar, ), 203] [semi, ;, 203] [inlinecmt, //nested parenthesis, 203] 
[if, if, 205][openpar, (, 205] [intnum, 3, 205] [gt, >, 205] [intnum, 4, 205] [closepar, ), 205] [inlinecmt, // empty if else block, 205] 
[then, then, 206]
[opencubr, {, 207]
[closecubr, }, 208]
[else, else, 209][opencubr, {, 209] 
[closecubr, }, 210][semi, ;, 210] 
[if, if, 211][openpar, (, 211] [intnum, 3, 211] [geq, >=, 211] [intnum, 4, 211] [closepar, ), 211] [inlinecmt, // if: 1-statement then or else blocks, 211] 
[then, then, 212][opencubr, {, 212] 
[id, a, 213][assign, =, 213] [intnum, 3, 213] [semi, ;, 213] 
[closecubr, }, 214]
[else, else, 215][opencubr, {, 215] 
[id, b, 216][assign, =, 216] [intnum, 4, 216] [semi, ;, 216] 
[closecubr, }, 217][semi, ;, 217] 
[if, if, 219][openpar, (, 219] [intnum, 3, 219] [leq, <=, 219] [intnum, 4, 219] [closepar, ), 219] [inlinecmt, // if: n-statement then or else blocks, 219] 
[then, then, 220][opencubr, {, 220] 
[id, a, 221][assign, =, 221] [intnum, 3, 221] [semi, ;, 221] 
[id, b, 222][assign, =, 222] [intnum, 4, 222] [semi, ;, 222] 
[closecubr, }, 223]
[else, else, 224][opencubr, {, 224] 
[id, b, 225][assign, =, 225] [intnum, 4, 225] [semi, ;, 225] 
[id, a, 226][assign, =, 226] [intnum, 3, 226] [semi, ;, 226] 
[closecubr, }, 227][semi, ;, 227] 
[while, while, 228][openpar, (, 228] [intnum, 3, 228] [noteq, <>, 228] [intnum, 4, 228] [closepar, ), 228] [opencubr, {, 228] [inlinecmt, // empty while block, 228] 
[closecubr, }, 229][semi, ;, 229] 
[closecubr, }, 230]
[blockcmt, /*\n    classes\n    --------------------------------------\n| | no class declaration\n|X| class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n|X| no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n|X| no member\n| | no inherited class\n|X| one inherited class\n|X| multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n| | no free function definition\n|X| free function definition\n|X| multiple free function definitions\n|X| no member function definition\n|X| member function definition\n|X| multiple member function definitions\n|X| return type: void\n|X| return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n|X| type: integer\n|X| type: float\n|X| type: id\n|X| type: 1-dim array\n|X| type: n-dim array\n|X| type: array (with size)\n|X| type: array (without size)\n\n    functions: calls\n    --------------------------------------\n|X| free function call\n|X| member function call\n|X| parameters:0\n|X| parameters:1\n|X| parameters:n\n|X| array parameter - 1-dim\n|X| array parameter - n-dim\n|X| array parameter - with size\n|X| array parameter - without size\n|X| function call as statement\n|X| function call as expression factor\n|X| expression as parameter\n\n    variable declaration\n    --------------------------------------\n|X| type: integer\n|X| type: float\n|| type: string\n|X| type: id\n|X| type: 1-dim array\n|X| type: n-dim array\n|X| type: array (with size)\n| | type: array (without size) (not allowed)\n\n    function body: local variable declarations\n    --------------------------------------\n|X| no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n|X| no statement\n|X| 1 statement\n|X| n statements\n|X| if statement\n|X| if: empty then or else blocks\n|X| if: 1-statement then or else blocks\n|X| if: n-statements then or else blocks\n|X| while statement\n|X| while: empty block\n|X| while: 1-statement block\n|X| while: n-statement block\n|X| read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n|X| id(id).id\n|X| id(id).id()\n|X| id.id[id]\n|X| id[id].id\n|X| id[id].id[id]\n|X| id.id[id][id]\n|X| id[id][id].id\n|X| id[id][id].id[id][id]\n|X| id(id).id[id]\n|X| id(id).id[id][id]\n|X| expression as array index\n\n    expressions\n    --------------------------------------\n|X| single variable\n|X| involving addop\n|X| involving multop\n|X| involving relop\n|X| involving addop + multop\n|X| involving multop + relop\n|X| involving addop + multop + relop\n|X| involving parentheses\n|X| involving nested parentheses\n|X| involving not\n|X| involving sign\n|| involving literals\n|X| involving variable + idnest\n|X| involving function calls\n|X| involving all the above in one expression\n*/, 232]
