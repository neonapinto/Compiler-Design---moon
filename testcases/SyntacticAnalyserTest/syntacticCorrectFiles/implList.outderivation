START
=> PROG
=> REPTPROG0
=> STRUCTORIMPLORFUNC REPTPROG0
=> IMPLDEF REPTPROG0
=> impl id lcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL lcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { FUNCDEF REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { FUNCHEAD FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func id lpar FPARAMS rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate lpar FPARAMS rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( FPARAMS rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( id colon TYPE REPTFPARAMS3 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x colon TYPE REPTFPARAMS3 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : TYPE REPTFPARAMS3 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float REPTFPARAMS3 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> TYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float lcurbr REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { VARDECLORSTAT REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { STATEMENT REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return lpar EXPR rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( EXPR rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( ARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( TERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } STRUCTORIMPLORFUNC REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } IMPLDEF REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl id lcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC lcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { FUNCDEF REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { FUNCHEAD FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func id lpar FPARAMS rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate lpar FPARAMS rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( FPARAMS rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( id colon TYPE REPTFPARAMS3 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x colon TYPE REPTFPARAMS3 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : TYPE REPTFPARAMS3 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float REPTFPARAMS3 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> TYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float lcurbr REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { VARDECLORSTAT REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { VARDECL REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let id colon TYPE REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result colon TYPE REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : TYPE REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; VARDECLORSTAT REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; STATEMENT REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return lpar EXPR rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( EXPR rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( ARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( TERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( id FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } STRUCTORIMPLORFUNC REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } IMPLDEF REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl id lcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR lcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { FUNCDEF REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { FUNCHEAD FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func id lpar FPARAMS rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build lpar FPARAMS rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( FPARAMS rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( id colon TYPE REPTFPARAMS3 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A colon TYPE REPTFPARAMS3 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : TYPE REPTFPARAMS3 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float REPTFPARAMS3 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float ARRAYSIZE REPTFPARAMS3 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float lsqbr ARRAYSIZE1 REPTFPARAMS3 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ ARRAYSIZE1 REPTFPARAMS3 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ intnum rsqbr REPTFPARAMS3 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 rsqbr REPTFPARAMS3 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] REPTFPARAMS3 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] FPARAMSTAIL REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] comma id colon TYPE REPTFPARAMSTAIL4 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , id colon TYPE REPTFPARAMSTAIL4 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B colon TYPE REPTFPARAMSTAIL4 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : TYPE REPTFPARAMSTAIL4 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float REPTFPARAMSTAIL4 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float ARRAYSIZE REPTFPARAMSTAIL4 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float lsqbr ARRAYSIZE1 REPTFPARAMSTAIL4 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ ARRAYSIZE1 REPTFPARAMSTAIL4 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ intnum rsqbr REPTFPARAMSTAIL4 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 rsqbr REPTFPARAMSTAIL4 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] REPTFPARAMSTAIL4 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> TYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> id FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR lcurbr REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { VARDECLORSTAT REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { VARDECL REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let id colon TYPE REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function colon TYPE REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : TYPE REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : id REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; VARDECLORSTAT REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; STATEMENT REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; id STATEMENT1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function STATEMENT1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function dot id STATEMENT1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . id STATEMENT1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b STATEMENT1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b ASSIGNOP EXPR semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b assign EXPR semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = EXPR semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = ARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = TERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = id FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; VARDECLORSTAT REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; STATEMENT REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return lpar EXPR rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( EXPR rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( ARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( TERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( id FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } FUNCDEF REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } FUNCHEAD FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func id lpar FPARAMS rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate lpar FPARAMS rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( FPARAMS rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( id colon TYPE REPTFPARAMS3 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x colon TYPE REPTFPARAMS3 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : TYPE REPTFPARAMS3 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float REPTFPARAMS3 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> TYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float lcurbr REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { VARDECLORSTAT REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { VARDECL REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let id colon TYPE REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result colon TYPE REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : TYPE REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; VARDECLORSTAT REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; STATEMENT REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; id STATEMENT1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result STATEMENT1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result ASSIGNOP EXPR semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result assign EXPR semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = EXPR semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = ARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = TERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = id FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a MULTOP FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a mult FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * id FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x ADDOP TERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x plus TERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + TERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + id FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; VARDECLORSTAT REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; STATEMENT REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return lpar EXPR rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( EXPR rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( ARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( TERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( id FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } FUNCDEF REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } FUNCHEAD FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func id lpar FPARAMS rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum lpar FPARAMS rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( FPARAMS rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( id colon TYPE REPTFPARAMS3 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x colon TYPE REPTFPARAMS3 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : TYPE REPTFPARAMS3 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float REPTFPARAMS3 REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float REPTFPARAMS4 rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float rpar arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) arrow RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> TYPE FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float FUNCBODY REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float lcurbr REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { VARDECLORSTAT REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { STATEMENT REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { id STATEMENT1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result STATEMENT1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result ASSIGNOP EXPR semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result assign EXPR semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = EXPR semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = ARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = TERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = id FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a MULTOP FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a mult FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * id FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x ADDOP TERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x plus TERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + TERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + id FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b EXPR1 semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b ; REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b ; VARDECLORSTAT REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b ; STATEMENT REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b ; return lpar EXPR rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b ; return ( EXPR rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b ; return ( ARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b ; return ( TERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b ; return ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b ; return ( id FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b ; return ( result FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b ; return ( result VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b ; return ( result FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b ; return ( result RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b ; return ( result RIGHTRECARITHEXPR EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b ; return ( result EXPR1 rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b ; return ( result rpar semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b ; return ( result ) semi REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b ; return ( result ) ; REPTFUNCBODY1 rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b ; return ( result ) ; rcurbr REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b ; return ( result ) ; } REPTIMPLDEF3 rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b ; return ( result ) ; } rcurbr REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b ; return ( result ) ; } } REPTPROG0
=> impl POLYNOMIAL { func evaluate ( x : float ) -> float { return ( 0 ) ; } } impl QUADRATIC { func evaluate ( x : float ) -> float { let result : float ; return ( result ) ; } } impl LINEAR { func build ( A : float [ 10 ] , B : float [ 200 ] ) -> LINEAR { let new_function : LINEAR ; new_function . b = B ; return ( new_function ) ; } func evaluate ( x : float ) -> float { let result : float ; result = a * x + b ; return ( result ) ; } func sum ( x : float ) -> float { result = a * x + b ; return ( result ) ; } } 
