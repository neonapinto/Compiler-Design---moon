START
=> PROG
=> REPTPROG0
=> STRUCTORIMPLORFUNC REPTPROG0
=> FUNCDEF REPTPROG0
=> FUNCHEAD FUNCBODY REPTPROG0
=> func id lpar FPARAMS rpar arrow RETURNTYPE FUNCBODY REPTPROG0
=> func main lpar FPARAMS rpar arrow RETURNTYPE FUNCBODY REPTPROG0
=> func main ( FPARAMS rpar arrow RETURNTYPE FUNCBODY REPTPROG0
=> func main ( rpar arrow RETURNTYPE FUNCBODY REPTPROG0
=> func main ( ) arrow RETURNTYPE FUNCBODY REPTPROG0
=> func main ( ) -> RETURNTYPE FUNCBODY REPTPROG0
=> func main ( ) -> void FUNCBODY REPTPROG0
=> func main ( ) -> void lcurbr REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { VARDECLORSTAT REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { VARDECL REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let id colon TYPE REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x colon TYPE REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : TYPE REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; VARDECLORSTAT REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; VARDECL REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let id colon TYPE REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y colon TYPE REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : TYPE REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; VARDECLORSTAT REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; VARDECL REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let id colon TYPE REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z colon TYPE REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : TYPE REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; VARDECLORSTAT REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; STATEMENT REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; id STATEMENT1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y STATEMENT1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y ASSIGNOP EXPR semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y assign EXPR semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = EXPR semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = ARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = TERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 ADDOP TERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 plus TERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + TERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 MULTOP FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 mult FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; VARDECLORSTAT REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; STATEMENT REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read lpar VARIABLE rpar semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( VARIABLE rpar semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( id VARIABLE1 rpar semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x VARIABLE1 rpar semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x VARIABLETAIL VARIABLE2 rpar semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x VARIABLE2 rpar semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x rpar semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; VARDECLORSTAT REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; STATEMENT REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if lpar EXPR rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( EXPR rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( ARITHEXPR EXPR1 rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( TERM RIGHTRECARITHEXPR EXPR1 rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( id FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x RIGHTRECARITHEXPR EXPR1 rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x EXPR1 rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x RELOP ARITHEXPR rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x gt ARITHEXPR rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > ARITHEXPR rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > TERM RIGHTRECARITHEXPR rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > id FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y RIGHTRECTERM RIGHTRECARITHEXPR rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y RIGHTRECARITHEXPR rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y ADDOP TERM RIGHTRECARITHEXPR rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y plus TERM RIGHTRECARITHEXPR rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + TERM RIGHTRECARITHEXPR rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + intnum RIGHTRECTERM RIGHTRECARITHEXPR rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 RIGHTRECTERM RIGHTRECARITHEXPR rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 RIGHTRECARITHEXPR rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 rpar then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then STATBLOCK else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then STATEMENT else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write lpar EXPR rpar semi else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( EXPR rpar semi else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( ARITHEXPR EXPR1 rpar semi else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( TERM RIGHTRECARITHEXPR EXPR1 rpar semi else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( id FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x RIGHTRECARITHEXPR EXPR1 rpar semi else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x ADDOP TERM RIGHTRECARITHEXPR EXPR1 rpar semi else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x plus TERM RIGHTRECARITHEXPR EXPR1 rpar semi else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + TERM RIGHTRECARITHEXPR EXPR1 rpar semi else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 RIGHTRECARITHEXPR EXPR1 rpar semi else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 EXPR1 rpar semi else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 rpar semi else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) semi else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else STATEMENT semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write lpar EXPR rpar semi semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( EXPR rpar semi semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( ARITHEXPR EXPR1 rpar semi semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( TERM RIGHTRECARITHEXPR EXPR1 rpar semi semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( id FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x RIGHTRECARITHEXPR EXPR1 rpar semi semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x ADDOP TERM RIGHTRECARITHEXPR EXPR1 rpar semi semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x plus TERM RIGHTRECARITHEXPR EXPR1 rpar semi semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + TERM RIGHTRECARITHEXPR EXPR1 rpar semi semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 RIGHTRECARITHEXPR EXPR1 rpar semi semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 EXPR1 rpar semi semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 rpar semi semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) semi semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; VARDECLORSTAT REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; STATEMENT REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; id STATEMENT1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z STATEMENT1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z ASSIGNOP EXPR semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z assign EXPR semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = EXPR semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = ARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = TERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; VARDECLORSTAT REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; STATEMENT REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while lpar EXPR rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( EXPR rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( ARITHEXPR EXPR1 rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( TERM RIGHTRECARITHEXPR EXPR1 rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( id FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z RIGHTRECARITHEXPR EXPR1 rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z EXPR1 rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z RELOP ARITHEXPR rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z leq ARITHEXPR rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= ARITHEXPR rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= TERM RIGHTRECARITHEXPR rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= intnum RIGHTRECTERM RIGHTRECARITHEXPR rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 RIGHTRECTERM RIGHTRECARITHEXPR rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 RIGHTRECARITHEXPR rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) lcurbr REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { STATEMENT REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write lpar EXPR rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( EXPR rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( ARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( TERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( id FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; STATEMENT REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; id STATEMENT1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z STATEMENT1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z VARIABLETAIL STATEMENT2 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z STATEMENT2 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z ASSIGNOP EXPR semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z assign EXPR semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = EXPR semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = ARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = TERM RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = id FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z ADDOP TERM RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z plus TERM RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + TERM RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; VARDECLORSTAT REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; VARDECL REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let id colon TYPE REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr colon TYPE REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : TYPE REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer ARRAYSIZE REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer lsqbr ARRAYSIZE1 REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ ARRAYSIZE1 REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ intnum rsqbr REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 rsqbr REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; VARDECLORSTAT REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; VARDECL REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let id colon TYPE REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i colon TYPE REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : TYPE REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer REPTVARDECL4 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; VARDECLORSTAT REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; STATEMENT REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; id STATEMENT1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i STATEMENT1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i ASSIGNOP EXPR semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i assign EXPR semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = EXPR semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = ARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = TERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; VARDECLORSTAT REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; STATEMENT REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; id STATEMENT1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr STATEMENT1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr INDICE VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr lsqbr ARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ ARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ TERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ id FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i ADDOP TERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i plus TERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + TERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + intnum RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] ASSIGNOP EXPR semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] assign EXPR semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = EXPR semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = ARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = TERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; VARDECLORSTAT REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; STATEMENT REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; id STATEMENT1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr STATEMENT1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr INDICE VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr lsqbr ARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ ARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ TERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ id FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i ADDOP TERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i plus TERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + TERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + intnum RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] ASSIGNOP EXPR semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] assign EXPR semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = EXPR semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = ARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = TERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; VARDECLORSTAT REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; STATEMENT REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; id STATEMENT1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr STATEMENT1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr INDICE VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr lsqbr ARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ ARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ TERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ id FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i ADDOP TERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i plus TERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + TERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + intnum RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 RIGHTRECARITHEXPR rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 rsqbr VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] VARIABLETAIL STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] STATEMENT2 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] ASSIGNOP EXPR semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] assign EXPR semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = EXPR semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = ARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = TERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 RIGHTRECARITHEXPR EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 EXPR1 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; VARDECLORSTAT REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; STATEMENT REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while lpar EXPR rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( EXPR rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( ARITHEXPR EXPR1 rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( TERM RIGHTRECARITHEXPR EXPR1 rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( id FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i RIGHTRECARITHEXPR EXPR1 rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i EXPR1 rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i RELOP ARITHEXPR rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i lt ARITHEXPR rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < ARITHEXPR rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < TERM RIGHTRECARITHEXPR rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < intnum RIGHTRECTERM RIGHTRECARITHEXPR rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 RIGHTRECTERM RIGHTRECARITHEXPR rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 RIGHTRECARITHEXPR rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 rpar STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) STATBLOCK semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) lcurbr REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { STATEMENT REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write lpar EXPR rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( EXPR rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( ARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( TERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( id FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr INDICE VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr lsqbr ARITHEXPR rsqbr VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ ARITHEXPR rsqbr VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ TERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ id FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i RIGHTRECARITHEXPR rsqbr VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i rsqbr VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] RIGHTRECARITHEXPR EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] EXPR1 rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] rpar semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; STATEMENT REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; id STATEMENT1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i STATEMENT1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i VARIABLETAIL STATEMENT2 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i STATEMENT2 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i ASSIGNOP EXPR semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i assign EXPR semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i = EXPR semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i = ARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i = TERM RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i = id FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i = i FACTOR1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i = i VARIABLETAIL FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i = i FACTOR2 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i = i RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i = i RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i = i ADDOP TERM RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i = i plus TERM RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i = i + TERM RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i = i + FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i = i + intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i = i + 1 RIGHTRECTERM RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i = i + 1 RIGHTRECARITHEXPR EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i = i + 1 EXPR1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i = i + 1 semi REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i = i + 1 ; REPTSTATBLOCK1 rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i = i + 1 ; rcurbr semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i = i + 1 ; } semi REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i = i + 1 ; } ; REPTFUNCBODY1 rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i = i + 1 ; } ; rcurbr REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i = i + 1 ; } ; } REPTPROG0
=> func main ( ) -> void { let x : integer ; let y : integer ; let z : integer ; y = 1 + 2 * 3 ; read ( x ) ; if ( x > y + 10 ) then write ( x + 10 ) ; else write ( x + 1 ) ; ; z = 0 ; while ( z <= 10 ) { write ( z ) ; z = z + 1 ; } ; let arr : integer [ 4 ] ; let i : integer ; i = 0 ; arr [ i + 1 ] = 3 ; arr [ i + 2 ] = 4 ; arr [ i + 3 ] = 5 ; while ( i < 4 ) { write ( arr [ i ] ) ; i = i + 1 ; } ; } 
