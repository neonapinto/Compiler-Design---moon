[inlinecmt, // Assignment 5 coverage:, 1] 
[inlinecmt, //      -------------, 2]
[inlinecmt, //      | YES | NO  |, 3]
[inlinecmt, //      -------------, 4]
[inlinecmt, // 1.1: |  X  |     |, 5]
[inlinecmt, // 1.2: |  X  |     |, 6]
[inlinecmt, // 1.3: |  X  |     |, 7]
[inlinecmt, // 1.4: |  X  |     |, 8]
[inlinecmt, // 2.1: |  X  |     |, 9]
[inlinecmt, // 2.2: |  X  |     |, 10]
[inlinecmt, // 2.3: |  X  |     |, 11]
[inlinecmt, // 2.4: |  X  |     |, 12]
[inlinecmt, // 3.1: |  X  |     |, 13]
[inlinecmt, // 3.2: |  X  |     |, 14]
[inlinecmt, // 3.3: |  X  |     |, 15]
[inlinecmt, // 3.4: |  X  |     |, 16]
[inlinecmt, // 4.1: |     |  X  |, 17]
[inlinecmt, // 4.2: |  X  |     |, 18]
[inlinecmt, // 4.3: |  X  |     |, 19]
[inlinecmt, // 4.4: |  X  |     |, 20]
[inlinecmt, // 5.1: |  X  |     |, 21]
[inlinecmt, // 5.2: |     |  X  |, 22]
[inlinecmt, // 5.3: |  X  |     |, 23]
[inlinecmt, //      -------------, 24]
[inlinecmt, // ====== struct declarations ====== //, 27]
[struct, struct, 28][id, POLYNOMIAL, 28] [opencubr, {, 28] 
[public, public, 29][func, func, 29] [id, evaluate, 29] [openpar, (, 29] [id, x, 29] [colon, :, 29] [float, float, 29] [closepar, ), 29] [arrow, ->, 29] [float, float, 29] [semi, ;, 29] 
[closecubr, }, 30][semi, ;, 30] 
[struct, struct, 32][id, LINEAR, 32] [inherits, inherits, 32] [id, POLYNOMIAL, 32] [opencubr, {, 32] 
[private, private, 33][let, let, 33] [id, a, 33] [colon, :, 33] [float, float, 33] [semi, ;, 33] 
[private, private, 34][let, let, 34] [id, b, 34] [colon, :, 34] [float, float, 34] [semi, ;, 34] 
[public, public, 35][func, func, 35] [id, build, 35] [openpar, (, 35] [id, A, 35] [colon, :, 35] [float, float, 35] [comma, ,, 35] [id, B, 35] [colon, :, 35] [float, float, 35] [closepar, ), 35] [arrow, ->, 35] [id, LINEAR, 35] [semi, ;, 35] 
[public, public, 36][func, func, 36] [id, evaluate, 36] [openpar, (, 36] [id, x, 36] [colon, :, 36] [float, float, 36] [closepar, ), 36] [arrow, ->, 36] [float, float, 36] [semi, ;, 36] 
[closecubr, }, 37][semi, ;, 37] 
[struct, struct, 39][id, QUADRATIC, 39] [inherits, inherits, 39] [id, POLYNOMIAL, 39] [opencubr, {, 39] 
[private, private, 40][let, let, 40] [id, a, 40] [colon, :, 40] [float, float, 40] [semi, ;, 40] 
[private, private, 41][let, let, 41] [id, b, 41] [colon, :, 41] [float, float, 41] [semi, ;, 41] 
[private, private, 42][let, let, 42] [id, c, 42] [colon, :, 42] [float, float, 42] [semi, ;, 42] 
[public, public, 43][func, func, 43] [id, build, 43] [openpar, (, 43] [id, A, 43] [colon, :, 43] [float, float, 43] [comma, ,, 43] [id, B, 43] [colon, :, 43] [float, float, 43] [comma, ,, 43] [id, C, 43] [colon, :, 43] [float, float, 43] [closepar, ), 43] [arrow, ->, 43] [id, QUADRATIC, 43] [semi, ;, 43] 
[public, public, 44][func, func, 44] [id, evaluate, 44] [openpar, (, 44] [id, x, 44] [colon, :, 44] [float, float, 44] [closepar, ), 44] [arrow, ->, 44] [float, float, 44] [semi, ;, 44] 
[closecubr, }, 45][semi, ;, 45] 
[inlinecmt, // ====== struct implementations ====== //, 47]
[impl, impl, 48][id, POLYNOMIAL, 48] [opencubr, {, 48] 
[func, func, 49][id, evaluate, 49] [openpar, (, 49] [id, x, 49] [colon, :, 49] [float, float, 49] [closepar, ), 49] [arrow, ->, 49] [float, float, 49] [inlinecmt, // 2.1, 2.2, 49] 
[opencubr, {, 50]
[return, return, 51][openpar, (, 51] [intnum, 0, 51] [closepar, ), 51] [semi, ;, 51] [inlinecmt, // 2.3, 51] 
[closecubr, }, 52]
[closecubr, }, 53]
[impl, impl, 55][id, QUADRATIC, 55] [opencubr, {, 55] 
[func, func, 56][id, evaluate, 56] [openpar, (, 56] [id, x, 56] [colon, :, 56] [float, float, 56] [closepar, ), 56] [arrow, ->, 56] [float, float, 56] [inlinecmt, // 2.1, 2.2, 56] 
[opencubr, {, 57]
[let, let, 58][id, result, 58] [colon, :, 58] [float, float, 58] [semi, ;, 58] [inlinecmt, // 1.1, 58] 
[inlinecmt, //Using Horner's method, 59]
[id, result, 60][assign, =, 60] [id, a, 60] [semi, ;, 60] [inlinecmt, // 3.1, 60] 
[id, result, 61][assign, =, 61] [id, result, 61] [mult, *, 61] [id, x, 61] [plus, +, 61] [id, b, 61] [semi, ;, 61] [inlinecmt, // 3.1, 5.1, 61] 
[id, result, 62][assign, =, 62] [id, result, 62] [mult, *, 62] [id, x, 62] [plus, +, 62] [id, c, 62] [semi, ;, 62] [inlinecmt, // 3.1, 5.1, 62] 
[return, return, 63][openpar, (, 63] [id, result, 63] [closepar, ), 63] [semi, ;, 63] [inlinecmt, // 2.3, 63] 
[closecubr, }, 64]
[func, func, 65][id, build, 65] [openpar, (, 65] [id, A, 65] [colon, :, 65] [float, float, 65] [comma, ,, 65] [id, B, 65] [colon, :, 65] [float, float, 65] [comma, ,, 65] [id, C, 65] [colon, :, 65] [float, float, 65] [closepar, ), 65] [arrow, ->, 65] [id, QUADRATIC, 65] [inlinecmt, // 2.1, 2.2, 65] 
[opencubr, {, 66]
[let, let, 67][id, new_function, 67] [colon, :, 67] [id, QUADRATIC, 67] [semi, ;, 67] [inlinecmt, // 1.3, 67] 
[id, new_function, 68][dot, ., 68] [id, a, 68] [assign, =, 68] [id, A, 68] [semi, ;, 68] [inlinecmt, // 3.1, 5.3, 68] 
[id, new_function, 69][dot, ., 69] [id, b, 69] [assign, =, 69] [id, B, 69] [semi, ;, 69] [inlinecmt, // 3.1, 5.3, 69] 
[id, new_function, 70][dot, ., 70] [id, c, 70] [assign, =, 70] [id, C, 70] [semi, ;, 70] [inlinecmt, // 3.1, 5.3, 70] 
[return, return, 71][openpar, (, 71] [id, new_function, 71] [closepar, ), 71] [semi, ;, 71] [inlinecmt, // 2.3, 71] 
[closecubr, }, 72]
[closecubr, }, 73]
[impl, impl, 75][id, LINEAR, 75] [opencubr, {, 75] 
[func, func, 76][id, build, 76] [openpar, (, 76] [id, A, 76] [colon, :, 76] [float, float, 76] [comma, ,, 76] [id, B, 76] [colon, :, 76] [float, float, 76] [closepar, ), 76] [arrow, ->, 76] [id, LINEAR, 76] [inlinecmt, // 2.1, 2.2, 76] 
[opencubr, {, 77]
[let, let, 78][id, new_function, 78] [colon, :, 78] [id, LINEAR, 78] [semi, ;, 78] [inlinecmt, // 1.3, 78] 
[id, new_function, 79][dot, ., 79] [id, a, 79] [assign, =, 79] [id, A, 79] [semi, ;, 79] [inlinecmt, // 3.1, 5.3, 79] 
[id, new_function, 80][dot, ., 80] [id, b, 80] [assign, =, 80] [id, B, 80] [semi, ;, 80] [inlinecmt, // 3.1, 5.3, 80] 
[return, return, 81][openpar, (, 81] [id, new_function, 81] [closepar, ), 81] [semi, ;, 81] [inlinecmt, // 2.3, 81] 
[closecubr, }, 82]
[func, func, 83][id, evaluate, 83] [openpar, (, 83] [id, x, 83] [colon, :, 83] [float, float, 83] [closepar, ), 83] [arrow, ->, 83] [float, float, 83] [inlinecmt, // 2.1, 2.2, 83] 
[opencubr, {, 84]
[let, let, 85][id, result, 85] [colon, :, 85] [float, float, 85] [semi, ;, 85] [inlinecmt, // 1.1, 85] 
[id, result, 86][assign, =, 86] [floatnum, 0.0, 86] [semi, ;, 86] [inlinecmt, // 3.1, 86] 
[id, result, 87][assign, =, 87] [id, a, 87] [mult, *, 87] [id, x, 87] [plus, +, 87] [id, b, 87] [semi, ;, 87] [inlinecmt, // 3.1, 5.1, 87] 
[return, return, 88][openpar, (, 88] [id, result, 88] [closepar, ), 88] [semi, ;, 88] [inlinecmt, // 2.3, 88] 
[closecubr, }, 89]
[closecubr, }, 90]
[inlinecmt, // ====== main ====== //, 92]
[func, func, 93][id, main, 93] [openpar, (, 93] [closepar, ), 93] [arrow, ->, 93] [void, void, 93] [inlinecmt, // 2.1, 2.2, 93] 
[opencubr, {, 94]
[let, let, 95][id, f1, 95] [colon, :, 95] [id, LINEAR, 95] [semi, ;, 95] [inlinecmt, // 1.3, 95] 
[let, let, 96][id, f2, 96] [colon, :, 96] [id, QUADRATIC, 96] [semi, ;, 96] [inlinecmt, // 1.3, 96] 
[let, let, 97][id, counter, 97] [colon, :, 97] [integer, integer, 97] [semi, ;, 97] [inlinecmt, // 1.1, 97] 
[id, f1, 98][assign, =, 98] [id, f1, 98] [dot, ., 98] [id, build, 98] [openpar, (, 98] [intnum, 2, 98] [comma, ,, 98] [floatnum, 3.5, 98] [closepar, ), 98] [semi, ;, 98] [inlinecmt, // 2.1, 2.2, 2.4, 98] 
[id, f2, 99][assign, =, 99] [id, f2, 99] [dot, ., 99] [id, build, 99] [openpar, (, 99] [minus, -, 99] [floatnum, 2.0, 99] [comma, ,, 99] [floatnum, 1.0, 99] [comma, ,, 99] [floatnum, 0.0, 99] [closepar, ), 99] [semi, ;, 99] [inlinecmt, // 2.1, 2.2, 2.4, 99] 
[id, counter, 100][assign, =, 100] [intnum, 1, 100] [semi, ;, 100] [inlinecmt, // 3.1, 100] 
[while, while, 102][openpar, (, 102] [id, counter, 102] [leq, <=, 102] [intnum, 10, 102] [closepar, ), 102] [inlinecmt, // 3.3, 5.1, 102] 
[opencubr, {, 103]
[write, write, 104][openpar, (, 104] [id, counter, 104] [closepar, ), 104] [semi, ;, 104] [inlinecmt, // 3.4, 104] 
[write, write, 105][openpar, (, 105] [id, f1, 105] [dot, ., 105] [id, evaluate, 105] [openpar, (, 105] [id, counter, 105] [closepar, ), 105] [closepar, ), 105] [semi, ;, 105] [inlinecmt, // 3.4, 2.1, 2.2, 2.4, 105] 
[write, write, 106][openpar, (, 106] [id, f2, 106] [dot, ., 106] [id, evaluate, 106] [openpar, (, 106] [id, counter, 106] [closepar, ), 106] [closepar, ), 106] [semi, ;, 106] [inlinecmt, // 3.4, 2.1, 2.2, 2.4, 106] 
[id, counter, 107][assign, =, 107] [id, counter, 107] [plus, +, 107] [intnum, 1, 107] [semi, ;, 107] [inlinecmt, // 3.1, 107] 
[closecubr, }, 108][semi, ;, 108] 
[let, let, 110][id, arr, 110] [colon, :, 110] [id, LINEAR, 110] [opensqbr, [, 110] [intnum, 4, 110] [closesqbr, ], 110] [semi, ;, 110] [inlinecmt, //1.4, 110] 
[id, arr, 111][opensqbr, [, 111] [intnum, 0, 111] [closesqbr, ], 111] [assign, =, 111] [id, f1, 111] [dot, ., 111] [id, evaluate, 111] [openpar, (, 111] [intnum, 1, 111] [closepar, ), 111] [semi, ;, 111] 
[write, write, 112][openpar, (, 112] [id, arr, 112] [opensqbr, [, 112] [intnum, 0, 112] [closesqbr, ], 112] [closepar, ), 112] [semi, ;, 112] 
[closecubr, }, 113]
