[inlinecmt, // Assignment 5 coverage:, 1] 
[inlinecmt, //      -------------, 2]
[inlinecmt, //      | YES | NO  |, 3]
[inlinecmt, //      -------------, 4]
[inlinecmt, // 1.1: |  X  |     |, 5]
[inlinecmt, // 1.2: |  X  |     |, 6]
[inlinecmt, // 1.3: |     |  X  |, 7]
[inlinecmt, // 1.4: |     |  X  |, 8]
[inlinecmt, // 2.1: |  X  |     |, 9]
[inlinecmt, // 2.2: |  X  |     |, 10]
[inlinecmt, // 2.3: |     |  X  |, 11]
[inlinecmt, // 2.4: |     |  X  |, 12]
[inlinecmt, // 3.1: |  X  |     |, 13]
[inlinecmt, // 3.2: |  X  |     |, 14]
[inlinecmt, // 3.3: |  X  |     |, 15]
[inlinecmt, // 3.4: |  X  |     |, 16]
[inlinecmt, // 4.1: |  X  |     |, 17]
[inlinecmt, // 4.2: |     |  X  |, 18]
[inlinecmt, // 4.3: |     |  X  |, 19]
[inlinecmt, // 4.4: |     |  X  |, 20]
[inlinecmt, // 5.1: |  X  |     |, 21]
[inlinecmt, // 5.2: |  X  |     |, 22]
[inlinecmt, // 5.3: |     |  X  |, 23]
[inlinecmt, //      -------------, 24]
[blockcmt, /* sort the array */, 26]
[func, func, 27][id, bubbleSort, 27] [openpar, (, 27] [id, arr, 27] [colon, :, 27] [integer, integer, 27] [opensqbr, [, 27] [closesqbr, ], 27] [comma, ,, 27] [id, size, 27] [colon, :, 27] [integer, integer, 27] [closepar, ), 27] [arrow, ->, 27] [void, void, 27] [inlinecmt, // 2.1, 2.2, 27] 
[opencubr, {, 28]
[let, let, 29][id, n, 29] [colon, :, 29] [integer, integer, 29] [semi, ;, 29] [inlinecmt, // 1.1, 29] 
[let, let, 30][id, i, 30] [colon, :, 30] [integer, integer, 30] [semi, ;, 30] [inlinecmt, // 1.1, 30] 
[let, let, 31][id, j, 31] [colon, :, 31] [integer, integer, 31] [semi, ;, 31] [inlinecmt, // 1.1, 31] 
[let, let, 32][id, temp, 32] [colon, :, 32] [integer, integer, 32] [semi, ;, 32] [inlinecmt, // 1.1, 32] 
[id, n, 33][assign, =, 33] [id, size, 33] [semi, ;, 33] [inlinecmt, // 3.1, 33] 
[id, i, 34][assign, =, 34] [intnum, 0, 34] [semi, ;, 34] [inlinecmt, // 3.1, 34] 
[id, j, 35][assign, =, 35] [intnum, 0, 35] [semi, ;, 35] [inlinecmt, // 3.1, 35] 
[id, temp, 36][assign, =, 36] [intnum, 0, 36] [semi, ;, 36] [inlinecmt, // 3.1, 36] 
[while, while, 37][openpar, (, 37] [id, i, 37] [lt, <, 37] [id, n, 37] [minus, -, 37] [intnum, 1, 37] [closepar, ), 37] [opencubr, {, 37] [inlinecmt, // 3.3, 5.1, 37] 
[id, j, 38][assign, =, 38] [intnum, 0, 38] [semi, ;, 38] [inlinecmt, // 3.1, 38] 
[while, while, 39][openpar, (, 39] [id, j, 39] [lt, <, 39] [id, n, 39] [minus, -, 39] [id, i, 39] [minus, -, 39] [intnum, 1, 39] [closepar, ), 39] [opencubr, {, 39] [inlinecmt, // 3.3, 39] 
[if, if, 40][openpar, (, 40] [id, arr, 40] [opensqbr, [, 40] [id, j, 40] [closesqbr, ], 40] [gt, >, 40] [id, arr, 40] [opensqbr, [, 40] [id, j, 40] [plus, +, 40] [intnum, 1, 40] [closesqbr, ], 40] [closepar, ), 40] [inlinecmt, // 3.2, 4.1, 5.1, 5.2, 40] 
[then, then, 41][opencubr, {, 41] 
[inlinecmt, // swap temp and arr[i], 42]
[id, temp, 43][assign, =, 43] [id, arr, 43] [opensqbr, [, 43] [id, j, 43] [closesqbr, ], 43] [semi, ;, 43] [inlinecmt, // 3.1, 4.1, 5.2, 43] 
[id, arr, 44][opensqbr, [, 44] [id, j, 44] [closesqbr, ], 44] [assign, =, 44] [id, arr, 44] [opensqbr, [, 44] [id, j, 44] [plus, +, 44] [intnum, 1, 44] [closesqbr, ], 44] [semi, ;, 44] [inlinecmt, // 3.1, 4.1, 5.2, 44] 
[id, arr, 45][opensqbr, [, 45] [id, j, 45] [plus, +, 45] [intnum, 1, 45] [closesqbr, ], 45] [assign, =, 45] [id, temp, 45] [semi, ;, 45] [inlinecmt, // 3.1, 4.1, 5.2, 45] 
[closecubr, }, 46][else, else, 46] [semi, ;, 46] 
[id, j, 47][assign, =, 47] [id, j, 47] [plus, +, 47] [intnum, 1, 47] [semi, ;, 47] [inlinecmt, // 3.1, 5.1, 47] 
[closecubr, }, 48][semi, ;, 48] 
[id, i, 49][assign, =, 49] [id, i, 49] [plus, +, 49] [intnum, 1, 49] [semi, ;, 49] [inlinecmt, // 3.1, 5.1, 49] 
[closecubr, }, 50][semi, ;, 50] 
[closecubr, }, 51]
[blockcmt, /* Print the array */, 53]
[func, func, 54][id, printArray, 54] [openpar, (, 54] [id, arr, 54] [colon, :, 54] [integer, integer, 54] [opensqbr, [, 54] [closesqbr, ], 54] [comma, ,, 54] [id, size, 54] [colon, :, 54] [integer, integer, 54] [closepar, ), 54] [arrow, ->, 54] [void, void, 54] [inlinecmt, // 2.1, 2.2, 54] 
[opencubr, {, 55]
[let, let, 56][id, n, 56] [colon, :, 56] [integer, integer, 56] [semi, ;, 56] [inlinecmt, // 1.1, 56] 
[let, let, 57][id, i, 57] [colon, :, 57] [integer, integer, 57] [semi, ;, 57] [inlinecmt, // 1.1, 57] 
[id, n, 58][assign, =, 58] [id, size, 58] [semi, ;, 58] [inlinecmt, // 3.1, 58] 
[id, i, 59][assign, =, 59] [intnum, 0, 59] [semi, ;, 59] [inlinecmt, // 3.1, 59] 
[while, while, 60][openpar, (, 60] [id, i, 60] [lt, <, 60] [id, n, 60] [closepar, ), 60] [opencubr, {, 60] [inlinecmt, // 3.3, 5.1, 60] 
[write, write, 61][openpar, (, 61] [id, arr, 61] [opensqbr, [, 61] [id, i, 61] [closesqbr, ], 61] [closepar, ), 61] [semi, ;, 61] [inlinecmt, // 3.4, 4.1, 5.2, 61] 
[id, i, 62][assign, =, 62] [id, i, 62] [plus, +, 62] [intnum, 1, 62] [semi, ;, 62] [inlinecmt, // 3.1, 5.1, 62] 
[closecubr, }, 63][semi, ;, 63] 
[closecubr, }, 64]
[inlinecmt, // main funtion to test above, 66]
[func, func, 67][id, main, 67] [openpar, (, 67] [closepar, ), 67] [arrow, ->, 67] [void, void, 67] 
[opencubr, {, 68]
[let, let, 69][id, arr, 69] [colon, :, 69] [integer, integer, 69] [opensqbr, [, 69] [intnum, 7, 69] [closesqbr, ], 69] [semi, ;, 69] [inlinecmt, // 1.1, 69] 
[id, arr, 70][opensqbr, [, 70] [intnum, 0, 70] [closesqbr, ], 70] [assign, =, 70] [intnum, 64, 70] [semi, ;, 70] [inlinecmt, // 3.1, 70] 
[id, arr, 71][opensqbr, [, 71] [intnum, 1, 71] [closesqbr, ], 71] [assign, =, 71] [intnum, 34, 71] [semi, ;, 71] [inlinecmt, // 3.1, 71] 
[id, arr, 72][opensqbr, [, 72] [intnum, 2, 72] [closesqbr, ], 72] [assign, =, 72] [intnum, 25, 72] [semi, ;, 72] [inlinecmt, // 3.1, 72] 
[id, arr, 73][opensqbr, [, 73] [intnum, 3, 73] [closesqbr, ], 73] [assign, =, 73] [intnum, 12, 73] [semi, ;, 73] [inlinecmt, // 3.1, 73] 
[id, arr, 74][opensqbr, [, 74] [intnum, 4, 74] [closesqbr, ], 74] [assign, =, 74] [intnum, 22, 74] [semi, ;, 74] [inlinecmt, // 3.1, 74] 
[id, arr, 75][opensqbr, [, 75] [intnum, 5, 75] [closesqbr, ], 75] [assign, =, 75] [intnum, 11, 75] [semi, ;, 75] [inlinecmt, // 3.1, 75] 
[id, arr, 76][opensqbr, [, 76] [intnum, 6, 76] [closesqbr, ], 76] [assign, =, 76] [intnum, 90, 76] [semi, ;, 76] [inlinecmt, // 3.1, 76] 
[id, printArray, 77][openpar, (, 77] [id, arr, 77] [comma, ,, 77] [intnum, 7, 77] [closepar, ), 77] [semi, ;, 77] [inlinecmt, // 2.1, 2.2, 77] 
[blockcmt, /* assumes that the array is passed as a reference */, 78]
[id, bubbleSort, 79][openpar, (, 79] [id, arr, 79] [comma, ,, 79] [intnum, 7, 79] [closepar, ), 79] [semi, ;, 79] [inlinecmt, // 2.1, 2.2, 79] 
[id, printArray, 80][openpar, (, 80] [id, arr, 80] [comma, ,, 80] [intnum, 7, 80] [closepar, ), 80] [semi, ;, 80] [inlinecmt, // 2.1, 2.2, 80] 
[closecubr, }, 81]
