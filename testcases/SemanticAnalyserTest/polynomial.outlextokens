[inlinecmt, // ====== struct declarations ====== //, 1] 
[struct, struct, 2][id, POLYNOMIAL, 2] [opencubr, {, 2] 
[public, public, 3][func, func, 3] [id, evaluate, 3] [openpar, (, 3] [id, x, 3] [colon, :, 3] [float, float, 3] [closepar, ), 3] [arrow, ->, 3] [float, float, 3] [semi, ;, 3] 
[closecubr, }, 4][semi, ;, 4] 
[struct, struct, 6][id, LINEAR, 6] [inherits, inherits, 6] [id, POLYNOMIAL, 6] [opencubr, {, 6] 
[private, private, 7][let, let, 7] [id, a, 7] [colon, :, 7] [float, float, 7] [semi, ;, 7] 
[private, private, 8][let, let, 8] [id, b, 8] [colon, :, 8] [float, float, 8] [semi, ;, 8] 
[public, public, 9][func, func, 9] [id, build, 9] [openpar, (, 9] [id, A, 9] [colon, :, 9] [float, float, 9] [comma, ,, 9] [id, B, 9] [colon, :, 9] [float, float, 9] [closepar, ), 9] [arrow, ->, 9] [id, LINEAR, 9] [semi, ;, 9] 
[public, public, 10][func, func, 10] [id, evaluate, 10] [openpar, (, 10] [id, x, 10] [colon, :, 10] [float, float, 10] [closepar, ), 10] [arrow, ->, 10] [float, float, 10] [semi, ;, 10] 
[closecubr, }, 11][semi, ;, 11] 
[struct, struct, 13][id, QUADRATIC, 13] [inherits, inherits, 13] [id, POLYNOMIAL, 13] [opencubr, {, 13] 
[private, private, 14][let, let, 14] [id, a, 14] [colon, :, 14] [float, float, 14] [semi, ;, 14] 
[private, private, 15][let, let, 15] [id, b, 15] [colon, :, 15] [float, float, 15] [semi, ;, 15] 
[private, private, 16][let, let, 16] [id, c, 16] [colon, :, 16] [float, float, 16] [semi, ;, 16] 
[public, public, 17][func, func, 17] [id, build, 17] [openpar, (, 17] [id, A, 17] [colon, :, 17] [float, float, 17] [comma, ,, 17] [id, B, 17] [colon, :, 17] [float, float, 17] [comma, ,, 17] [id, C, 17] [colon, :, 17] [float, float, 17] [closepar, ), 17] [arrow, ->, 17] [id, QUADRATIC, 17] [semi, ;, 17] 
[public, public, 18][func, func, 18] [id, evaluate, 18] [openpar, (, 18] [id, x, 18] [colon, :, 18] [float, float, 18] [closepar, ), 18] [arrow, ->, 18] [float, float, 18] [semi, ;, 18] 
[closecubr, }, 19][semi, ;, 19] 
[inlinecmt, // ====== struct implementations ====== //, 21]
[impl, impl, 22][id, POLYNOMIAL, 22] [opencubr, {, 22] 
[func, func, 23][id, evaluate, 23] [openpar, (, 23] [id, x, 23] [colon, :, 23] [float, float, 23] [closepar, ), 23] [arrow, ->, 23] [float, float, 23] 
[opencubr, {, 24]
[return, return, 25][openpar, (, 25] [floatnum, 0.0, 25] [closepar, ), 25] [semi, ;, 25] 
[closecubr, }, 26]
[closecubr, }, 27]
[impl, impl, 29][id, LINEAR, 29] [opencubr, {, 29] 
[func, func, 30][id, evaluate, 30] [openpar, (, 30] [id, x, 30] [colon, :, 30] [float, float, 30] [closepar, ), 30] [arrow, ->, 30] [float, float, 30] 
[opencubr, {, 31]
[let, let, 32][id, result, 32] [colon, :, 32] [float, float, 32] [semi, ;, 32] 
[id, result, 33][assign, =, 33] [floatnum, 0.0, 33] [semi, ;, 33] 
[id, result, 34][assign, =, 34] [id, a, 34] [mult, *, 34] [id, x, 34] [plus, +, 34] [id, b, 34] [semi, ;, 34] 
[return, return, 35][openpar, (, 35] [id, result, 35] [closepar, ), 35] [semi, ;, 35] 
[closecubr, }, 36]
[func, func, 37][id, build, 37] [openpar, (, 37] [id, A, 37] [colon, :, 37] [float, float, 37] [comma, ,, 37] [id, B, 37] [colon, :, 37] [float, float, 37] [closepar, ), 37] [arrow, ->, 37] [id, LINEAR, 37] 
[opencubr, {, 38]
[let, let, 39][id, new_function, 39] [colon, :, 39] [id, LINEAR, 39] [semi, ;, 39] 
[id, new_function, 40][dot, ., 40] [id, a, 40] [assign, =, 40] [id, A, 40] [semi, ;, 40] 
[id, new_function, 41][dot, ., 41] [id, b, 41] [assign, =, 41] [id, B, 41] [semi, ;, 41] 
[return, return, 42][openpar, (, 42] [id, new_function, 42] [closepar, ), 42] [semi, ;, 42] 
[closecubr, }, 43]
[closecubr, }, 44]
[impl, impl, 46][id, QUADRATIC, 46] [opencubr, {, 46] 
[func, func, 47][id, build, 47] [openpar, (, 47] [id, A, 47] [colon, :, 47] [float, float, 47] [comma, ,, 47] [id, B, 47] [colon, :, 47] [float, float, 47] [comma, ,, 47] [id, C, 47] [colon, :, 47] [float, float, 47] [closepar, ), 47] [arrow, ->, 47] [id, QUADRATIC, 47] 
[opencubr, {, 48]
[let, let, 49][id, new_function, 49] [colon, :, 49] [id, QUADRATIC, 49] [semi, ;, 49] 
[id, new_function, 50][dot, ., 50] [id, a, 50] [assign, =, 50] [id, A, 50] [semi, ;, 50] 
[id, new_function, 51][dot, ., 51] [id, b, 51] [assign, =, 51] [id, B, 51] [semi, ;, 51] 
[id, new_function, 52][dot, ., 52] [id, c, 52] [assign, =, 52] [id, C, 52] [semi, ;, 52] 
[return, return, 53][openpar, (, 53] [id, new_function, 53] [closepar, ), 53] [semi, ;, 53] 
[closecubr, }, 54]
[func, func, 55][id, evaluate, 55] [openpar, (, 55] [id, x, 55] [colon, :, 55] [float, float, 55] [closepar, ), 55] [arrow, ->, 55] [float, float, 55] 
[opencubr, {, 56]
[let, let, 57][id, result, 57] [colon, :, 57] [float, float, 57] [semi, ;, 57] 
[inlinecmt, //Using Horner's method, 58]
[id, result, 59][assign, =, 59] [id, a, 59] [semi, ;, 59] 
[id, result, 60][assign, =, 60] [id, result, 60] [mult, *, 60] [id, x, 60] [plus, +, 60] [id, b, 60] [semi, ;, 60] 
[id, result, 61][assign, =, 61] [id, result, 61] [mult, *, 61] [id, x, 61] [plus, +, 61] [id, c, 61] [semi, ;, 61] 
[return, return, 62][openpar, (, 62] [id, result, 62] [closepar, ), 62] [semi, ;, 62] 
[closecubr, }, 63]
[closecubr, }, 65]
[inlinecmt, // ====== main ====== //, 69]
[func, func, 70][id, main, 70] [openpar, (, 70] [closepar, ), 70] [arrow, ->, 70] [void, void, 70] 
[opencubr, {, 71]
[let, let, 72][id, f1, 72] [colon, :, 72] [id, LINEAR, 72] [semi, ;, 72] 
[let, let, 73][id, f2, 73] [colon, :, 73] [id, QUADRATIC, 73] [semi, ;, 73] 
[let, let, 74][id, counter, 74] [colon, :, 74] [integer, integer, 74] [semi, ;, 74] 
[id, f1, 75][assign, =, 75] [id, f1, 75] [dot, ., 75] [id, build, 75] [openpar, (, 75] [floatnum, 2.0, 75] [comma, ,, 75] [floatnum, 3.5, 75] [closepar, ), 75] [semi, ;, 75] 
[id, f2, 76][assign, =, 76] [id, f2, 76] [dot, ., 76] [id, build, 76] [openpar, (, 76] [minus, -, 76] [floatnum, 2.0, 76] [comma, ,, 76] [floatnum, 1.0, 76] [comma, ,, 76] [floatnum, 0.0, 76] [closepar, ), 76] [semi, ;, 76] 
[id, counter, 77][assign, =, 77] [intnum, 1, 77] [semi, ;, 77] 
[while, while, 79][openpar, (, 79] [id, counter, 79] [leq, <=, 79] [intnum, 10, 79] [closepar, ), 79] 
[opencubr, {, 80]
[write, write, 81][openpar, (, 81] [id, counter, 81] [closepar, ), 81] [semi, ;, 81] 
[write, write, 82][openpar, (, 82] [id, f1, 82] [dot, ., 82] [id, evaluate, 82] [openpar, (, 82] [id, counter, 82] [closepar, ), 82] [closepar, ), 82] [semi, ;, 82] 
[write, write, 83][openpar, (, 83] [id, f2, 83] [dot, ., 83] [id, evaluate, 83] [openpar, (, 83] [id, counter, 83] [closepar, ), 83] [closepar, ), 83] [semi, ;, 83] 
[id, counter, 84][assign, =, 84] [id, counter, 84] [plus, +, 84] [intnum, 1, 84] [semi, ;, 84] 
[closecubr, }, 85][semi, ;, 85] 
[closecubr, }, 86]
[blockcmt, /*\n1.   |X| global symbol table\n2.   |X| class symbol table\n3.1  |X| class data member\n3.2  |X| function's local variable\n4.1  |X| free function\n4.2  |X| member function\n6.1  | | undeclared member function definition\n6.2  | | undefined member function declaration\n8.1  | | multiply declared class\n8.2  | | multiply declared free function\n8.3  | | multiply declared identifier in class\n8.4  | | multiply declared identifier in function\n8.5  | | shadowed inherited data member\n9.1  | | Overloaded free function\n9.2  | | Overloaded member function\n9.3  | | Overridden inherited member function\n10.1 | | Type error in expression\n10.2 | | Type error in assignment statement \n10.3 | | Type error in return statement\n11.1 | | Undeclared local variable\n11.2 | | Undeclared data member\n11.3 | | Undeclared member function\n11.4 | | Undeclared free function\n11.5 | | Undeclared class\n12.1 | | Function call with wrong number of parameters\n12.2 | | Function call with wrong type of parameters\n13.1 | | Use of array with wrong number of dimensions\n13.2 | | Array index is not an integer\n13.3 | | Array parameter using wrong number of dimensions\n14.1 | | Circular class dependency\n15.1 | | "." operator used on non-class type\n*/, 87]
